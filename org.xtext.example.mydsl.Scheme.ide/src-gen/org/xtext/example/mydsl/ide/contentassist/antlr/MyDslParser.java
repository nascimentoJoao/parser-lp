/*
 * generated by Xtext 2.16.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getFormAccess().getAlternatives(), "rule__Form__Alternatives");
			builder.put(grammarAccess.getVariableDefinitionAccess().getAlternatives(), "rule__VariableDefinition__Alternatives");
			builder.put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
			builder.put(grammarAccess.getComparisonAccess().getAlternatives_1(), "rule__Comparison__Alternatives_1");
			builder.put(grammarAccess.getComparisonAccess().getAlternatives_1_0_1(), "rule__Comparison__Alternatives_1_0_1");
			builder.put(grammarAccess.getConstantAccess().getAlternatives(), "rule__Constant__Alternatives");
			builder.put(grammarAccess.getInitialAccess().getInitAlternatives_0(), "rule__Initial__InitAlternatives_0");
			builder.put(grammarAccess.getSubsequentAccess().getAlternatives_1(), "rule__Subsequent__Alternatives_1");
			builder.put(grammarAccess.getVariableDefinitionAccess().getGroup_0(), "rule__VariableDefinition__Group_0__0");
			builder.put(grammarAccess.getVariableDefinitionAccess().getGroup_1(), "rule__VariableDefinition__Group_1__0");
			builder.put(grammarAccess.getVariableDefinitionAccess().getGroup_2(), "rule__VariableDefinition__Group_2__0");
			builder.put(grammarAccess.getBodyAccess().getGroup(), "rule__Body__Group__0");
			builder.put(grammarAccess.getComparisonAccess().getGroup(), "rule__Comparison__Group__0");
			builder.put(grammarAccess.getComparisonAccess().getGroup_1_0(), "rule__Comparison__Group_1_0__0");
			builder.put(grammarAccess.getMultipleConditionAccess().getGroup(), "rule__MultipleCondition__Group__0");
			builder.put(grammarAccess.getMultipleConditionAccess().getGroup_2(), "rule__MultipleCondition__Group_2__0");
			builder.put(grammarAccess.getMultipleConditionAccess().getGroup_3(), "rule__MultipleCondition__Group_3__0");
			builder.put(grammarAccess.getApplicationAccess().getGroup(), "rule__Application__Group__0");
			builder.put(grammarAccess.getSetAccess().getGroup(), "rule__Set__Group__0");
			builder.put(grammarAccess.getConditionalAccess().getGroup(), "rule__Conditional__Group__0");
			builder.put(grammarAccess.getOperationAccess().getGroup(), "rule__Operation__Group__0");
			builder.put(grammarAccess.getIDschemeAccess().getGroup(), "rule__IDscheme__Group__0");
			builder.put(grammarAccess.getSubsequentAccess().getGroup(), "rule__Subsequent__Group__0");
			builder.put(grammarAccess.getProgramAccess().getProgramAssignment(), "rule__Program__ProgramAssignment");
			builder.put(grammarAccess.getFormAccess().getDefinitionAssignment_0(), "rule__Form__DefinitionAssignment_0");
			builder.put(grammarAccess.getFormAccess().getExpressionAssignment_1(), "rule__Form__ExpressionAssignment_1");
			builder.put(grammarAccess.getDefinitionAccess().getVariableDefinitionAssignment(), "rule__Definition__VariableDefinitionAssignment");
			builder.put(grammarAccess.getVariableDefinitionAccess().getVariableAssignment_0_2(), "rule__VariableDefinition__VariableAssignment_0_2");
			builder.put(grammarAccess.getVariableDefinitionAccess().getExpressionAssignment_0_3(), "rule__VariableDefinition__ExpressionAssignment_0_3");
			builder.put(grammarAccess.getVariableDefinitionAccess().getVariableAssignment_1_3(), "rule__VariableDefinition__VariableAssignment_1_3");
			builder.put(grammarAccess.getVariableDefinitionAccess().getVariablesAssignment_1_4(), "rule__VariableDefinition__VariablesAssignment_1_4");
			builder.put(grammarAccess.getVariableDefinitionAccess().getBodyAssignment_1_6(), "rule__VariableDefinition__BodyAssignment_1_6");
			builder.put(grammarAccess.getVariableDefinitionAccess().getVariableAssignment_2_3(), "rule__VariableDefinition__VariableAssignment_2_3");
			builder.put(grammarAccess.getVariableDefinitionAccess().getVariablesAssignment_2_4(), "rule__VariableDefinition__VariablesAssignment_2_4");
			builder.put(grammarAccess.getVariableDefinitionAccess().getVarAssignment_2_6(), "rule__VariableDefinition__VarAssignment_2_6");
			builder.put(grammarAccess.getVariableDefinitionAccess().getBodyAssignment_2_8(), "rule__VariableDefinition__BodyAssignment_2_8");
			builder.put(grammarAccess.getBodyAccess().getDefinitionAssignment_0(), "rule__Body__DefinitionAssignment_0");
			builder.put(grammarAccess.getBodyAccess().getExpressionAssignment_1(), "rule__Body__ExpressionAssignment_1");
			builder.put(grammarAccess.getExpressionAccess().getConstantAssignment_0(), "rule__Expression__ConstantAssignment_0");
			builder.put(grammarAccess.getExpressionAccess().getOperAssignment_1(), "rule__Expression__OperAssignment_1");
			builder.put(grammarAccess.getExpressionAccess().getCondAssignment_2(), "rule__Expression__CondAssignment_2");
			builder.put(grammarAccess.getExpressionAccess().getSetAssignment_3(), "rule__Expression__SetAssignment_3");
			builder.put(grammarAccess.getExpressionAccess().getAppAssignment_4(), "rule__Expression__AppAssignment_4");
			builder.put(grammarAccess.getExpressionAccess().getMultAssignment_5(), "rule__Expression__MultAssignment_5");
			builder.put(grammarAccess.getComparisonAccess().getNum1Assignment_1_0_2(), "rule__Comparison__Num1Assignment_1_0_2");
			builder.put(grammarAccess.getComparisonAccess().getNum2Assignment_1_0_3(), "rule__Comparison__Num2Assignment_1_0_3");
			builder.put(grammarAccess.getMultipleConditionAccess().getCompAssignment_2_1(), "rule__MultipleCondition__CompAssignment_2_1");
			builder.put(grammarAccess.getMultipleConditionAccess().getExpAssignment_2_2(), "rule__MultipleCondition__ExpAssignment_2_2");
			builder.put(grammarAccess.getMultipleConditionAccess().getExpressionAssignment_3_2(), "rule__MultipleCondition__ExpressionAssignment_3_2");
			builder.put(grammarAccess.getApplicationAccess().getExpressionAssignment_1(), "rule__Application__ExpressionAssignment_1");
			builder.put(grammarAccess.getApplicationAccess().getExpressionsAssignment_2(), "rule__Application__ExpressionsAssignment_2");
			builder.put(grammarAccess.getSetAccess().getConsAssignment_2(), "rule__Set__ConsAssignment_2");
			builder.put(grammarAccess.getSetAccess().getExpressionAssignment_3(), "rule__Set__ExpressionAssignment_3");
			builder.put(grammarAccess.getConditionalAccess().getConditionAssignment_2(), "rule__Conditional__ConditionAssignment_2");
			builder.put(grammarAccess.getConditionalAccess().getIftrueAssignment_3(), "rule__Conditional__IftrueAssignment_3");
			builder.put(grammarAccess.getConditionalAccess().getElseAssignment_4(), "rule__Conditional__ElseAssignment_4");
			builder.put(grammarAccess.getOperationAccess().getOperationAssignment_0(), "rule__Operation__OperationAssignment_0");
			builder.put(grammarAccess.getOperationAccess().getOperatorAssignment_1(), "rule__Operation__OperatorAssignment_1");
			builder.put(grammarAccess.getOperationAccess().getNumbAssignment_3(), "rule__Operation__NumbAssignment_3");
			builder.put(grammarAccess.getOperationAccess().getNumb2Assignment_5(), "rule__Operation__Numb2Assignment_5");
			builder.put(grammarAccess.getIDschemeAccess().getInitAssignment_0(), "rule__IDscheme__InitAssignment_0");
			builder.put(grammarAccess.getIDschemeAccess().getSubsAssignment_1(), "rule__IDscheme__SubsAssignment_1");
			builder.put(grammarAccess.getInitialAccess().getInitAssignment(), "rule__Initial__InitAssignment");
			builder.put(grammarAccess.getSubsequentAccess().getInitAssignment_1_0(), "rule__Subsequent__InitAssignment_1_0");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyDslGrammarAccess grammarAccess;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
