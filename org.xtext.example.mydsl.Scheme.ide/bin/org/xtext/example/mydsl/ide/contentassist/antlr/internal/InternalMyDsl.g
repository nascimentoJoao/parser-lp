/*
 * generated by Xtext 2.16.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleProgram
entryRuleProgram
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProgramAccess().getAlternatives()); }
		(rule__Program__Alternatives)*
		{ after(grammarAccess.getProgramAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDefinition
entryRuleDefinition
:
{ before(grammarAccess.getDefinitionRule()); }
	 ruleDefinition
{ after(grammarAccess.getDefinitionRule()); } 
	 EOF 
;

// Rule Definition
ruleDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDefinitionAccess().getAlternatives()); }
		(rule__Definition__Alternatives)
		{ after(grammarAccess.getDefinitionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBody
entryRuleBody
:
{ before(grammarAccess.getBodyRule()); }
	 ruleBody
{ after(grammarAccess.getBodyRule()); } 
	 EOF 
;

// Rule Body
ruleBody 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBodyAccess().getGroup()); }
		(rule__Body__Group__0)
		{ after(grammarAccess.getBodyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
		(rule__Expression__Alternatives)
		{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComparison
entryRuleComparison
:
{ before(grammarAccess.getComparisonRule()); }
	 ruleComparison
{ after(grammarAccess.getComparisonRule()); } 
	 EOF 
;

// Rule Comparison
ruleComparison 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComparisonAccess().getGroup()); }
		(rule__Comparison__Group__0)
		{ after(grammarAccess.getComparisonAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTrigonometry
entryRuleTrigonometry
:
{ before(grammarAccess.getTrigonometryRule()); }
	 ruleTrigonometry
{ after(grammarAccess.getTrigonometryRule()); } 
	 EOF 
;

// Rule Trigonometry
ruleTrigonometry 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTrigonometryAccess().getGroup()); }
		(rule__Trigonometry__Group__0)
		{ after(grammarAccess.getTrigonometryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSet
entryRuleSet
:
{ before(grammarAccess.getSetRule()); }
	 ruleSet
{ after(grammarAccess.getSetRule()); } 
	 EOF 
;

// Rule Set
ruleSet 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSetAccess().getGroup()); }
		(rule__Set__Group__0)
		{ after(grammarAccess.getSetAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConditional
entryRuleConditional
:
{ before(grammarAccess.getConditionalRule()); }
	 ruleConditional
{ after(grammarAccess.getConditionalRule()); } 
	 EOF 
;

// Rule Conditional
ruleConditional 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionalAccess().getGroup()); }
		(rule__Conditional__Group__0)
		{ after(grammarAccess.getConditionalAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstant
entryRuleConstant
:
{ before(grammarAccess.getConstantRule()); }
	 ruleConstant
{ after(grammarAccess.getConstantRule()); } 
	 EOF 
;

// Rule Constant
ruleConstant 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstantAccess().getAlternatives()); }
		(rule__Constant__Alternatives)
		{ after(grammarAccess.getConstantAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNestedOperation
entryRuleNestedOperation
:
{ before(grammarAccess.getNestedOperationRule()); }
	 ruleNestedOperation
{ after(grammarAccess.getNestedOperationRule()); } 
	 EOF 
;

// Rule NestedOperation
ruleNestedOperation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNestedOperationAccess().getGroup()); }
		(rule__NestedOperation__Group__0)
		{ after(grammarAccess.getNestedOperationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOperation
entryRuleOperation
:
{ before(grammarAccess.getOperationRule()); }
	 ruleOperation
{ after(grammarAccess.getOperationRule()); } 
	 EOF 
;

// Rule Operation
ruleOperation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOperationAccess().getGroup()); }
		(rule__Operation__Group__0)
		{ after(grammarAccess.getOperationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCalculate
entryRuleCalculate
:
{ before(grammarAccess.getCalculateRule()); }
	 ruleCalculate
{ after(grammarAccess.getCalculateRule()); } 
	 EOF 
;

// Rule Calculate
ruleCalculate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCalculateAccess().getGroup()); }
		(rule__Calculate__Group__0)
		{ after(grammarAccess.getCalculateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleListNumbers
entryRuleListNumbers
:
{ before(grammarAccess.getListNumbersRule()); }
	 ruleListNumbers
{ after(grammarAccess.getListNumbersRule()); } 
	 EOF 
;

// Rule ListNumbers
ruleListNumbers 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getListNumbersAccess().getGroup()); }
		(rule__ListNumbers__Group__0)
		{ after(grammarAccess.getListNumbersAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleListLength
entryRuleListLength
:
{ before(grammarAccess.getListLengthRule()); }
	 ruleListLength
{ after(grammarAccess.getListLengthRule()); } 
	 EOF 
;

// Rule ListLength
ruleListLength 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getListLengthAccess().getGroup()); }
		(rule__ListLength__Group__0)
		{ after(grammarAccess.getListLengthAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumber
entryRuleNumber
:
{ before(grammarAccess.getNumberRule()); }
	 ruleNumber
{ after(grammarAccess.getNumberRule()); } 
	 EOF 
;

// Rule Number
ruleNumber 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumberAccess().getAlternatives()); }
		(rule__Number__Alternatives)
		{ after(grammarAccess.getNumberAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getProgramAssignment_0()); }
		(rule__Program__ProgramAssignment_0)
		{ after(grammarAccess.getProgramAccess().getProgramAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getProgramAccess().getProgramAssignment_1()); }
		(rule__Program__ProgramAssignment_1)
		{ after(grammarAccess.getProgramAccess().getProgramAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefinitionAccess().getGroup_0()); }
		(rule__Definition__Group_0__0)
		{ after(grammarAccess.getDefinitionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getDefinitionAccess().getGroup_1()); }
		(rule__Definition__Group_1__0)
		{ after(grammarAccess.getDefinitionAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getConstantAssignment_0()); }
		(rule__Expression__ConstantAssignment_0)
		{ after(grammarAccess.getExpressionAccess().getConstantAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getOperAssignment_1()); }
		(rule__Expression__OperAssignment_1)
		{ after(grammarAccess.getExpressionAccess().getOperAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getCompAssignment_2()); }
		(rule__Expression__CompAssignment_2)
		{ after(grammarAccess.getExpressionAccess().getCompAssignment_2()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getCondAssignment_3()); }
		(rule__Expression__CondAssignment_3)
		{ after(grammarAccess.getExpressionAccess().getCondAssignment_3()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getSetAssignment_4()); }
		(rule__Expression__SetAssignment_4)
		{ after(grammarAccess.getExpressionAccess().getSetAssignment_4()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getTrigAssignment_5()); }
		(rule__Expression__TrigAssignment_5)
		{ after(grammarAccess.getExpressionAccess().getTrigAssignment_5()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getListAssignment_6()); }
		(rule__Expression__ListAssignment_6)
		{ after(grammarAccess.getExpressionAccess().getListAssignment_6()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getListLengthAssignment_7()); }
		(rule__Expression__ListLengthAssignment_7)
		{ after(grammarAccess.getExpressionAccess().getListLengthAssignment_7()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getNestedOperationAssignment_8()); }
		(rule__Expression__NestedOperationAssignment_8)
		{ after(grammarAccess.getExpressionAccess().getNestedOperationAssignment_8()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getCalculateAssignment_9()); }
		(rule__Expression__CalculateAssignment_9)
		{ after(grammarAccess.getExpressionAccess().getCalculateAssignment_9()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getGroup_1_0()); }
		(rule__Comparison__Group_1_0__0)
		{ after(grammarAccess.getComparisonAccess().getGroup_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAccess().getBOOLTerminalRuleCall_1_1()); }
		RULE_BOOL
		{ after(grammarAccess.getComparisonAccess().getBOOLTerminalRuleCall_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Alternatives_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getLessThanSignKeyword_1_0_1_0()); }
		'<'
		{ after(grammarAccess.getComparisonAccess().getLessThanSignKeyword_1_0_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAccess().getGreaterThanSignKeyword_1_0_1_1()); }
		'>'
		{ after(grammarAccess.getComparisonAccess().getGreaterThanSignKeyword_1_0_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAccess().getEqualsSignKeyword_1_0_1_2()); }
		'='
		{ after(grammarAccess.getComparisonAccess().getEqualsSignKeyword_1_0_1_2()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAccess().getGreaterThanSignEqualsSignKeyword_1_0_1_3()); }
		'>='
		{ after(grammarAccess.getComparisonAccess().getGreaterThanSignEqualsSignKeyword_1_0_1_3()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAccess().getLessThanSignEqualsSignKeyword_1_0_1_4()); }
		'<='
		{ after(grammarAccess.getComparisonAccess().getLessThanSignEqualsSignKeyword_1_0_1_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstantAccess().getBOOLTerminalRuleCall_0()); }
		RULE_BOOL
		{ after(grammarAccess.getConstantAccess().getBOOLTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getConstantAccess().getDIGITTerminalRuleCall_1()); }
		RULE_DIGIT
		{ after(grammarAccess.getConstantAccess().getDIGITTerminalRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getConstantAccess().getDOUBLETerminalRuleCall_2()); }
		RULE_DOUBLE
		{ after(grammarAccess.getConstantAccess().getDOUBLETerminalRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getConstantAccess().getSTRINGTerminalRuleCall_3()); }
		RULE_STRING
		{ after(grammarAccess.getConstantAccess().getSTRINGTerminalRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getConstantAccess().getIDTerminalRuleCall_4()); }
		RULE_ID
		{ after(grammarAccess.getConstantAccess().getIDTerminalRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getConstantAccess().getLETTERTerminalRuleCall_5()); }
		RULE_LETTER
		{ after(grammarAccess.getConstantAccess().getLETTERTerminalRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getConstantAccess().getNEGATIVETerminalRuleCall_6()); }
		RULE_NEGATIVE
		{ after(grammarAccess.getConstantAccess().getNEGATIVETerminalRuleCall_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberAccess().getDIGITTerminalRuleCall_0()); }
		RULE_DIGIT
		{ after(grammarAccess.getNumberAccess().getDIGITTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNumberAccess().getDOUBLETerminalRuleCall_1()); }
		RULE_DOUBLE
		{ after(grammarAccess.getNumberAccess().getDOUBLETerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_0__0__Impl
	rule__Definition__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getLeftParenthesisKeyword_0_0()); }
	'('
	{ after(grammarAccess.getDefinitionAccess().getLeftParenthesisKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_0__1__Impl
	rule__Definition__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getDefineKeyword_0_1()); }
	'define'
	{ after(grammarAccess.getDefinitionAccess().getDefineKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_0__2__Impl
	rule__Definition__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getConsAssignment_0_2()); }
	(rule__Definition__ConsAssignment_0_2)
	{ after(grammarAccess.getDefinitionAccess().getConsAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_0__3__Impl
	rule__Definition__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getExpressionAssignment_0_3()); }
	(rule__Definition__ExpressionAssignment_0_3)
	{ after(grammarAccess.getDefinitionAccess().getExpressionAssignment_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_0__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_0__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_0__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getRightParenthesisKeyword_0_4()); }
	')'
	{ after(grammarAccess.getDefinitionAccess().getRightParenthesisKeyword_0_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Definition__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_1__0__Impl
	rule__Definition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getLeftParenthesisKeyword_1_0()); }
	'('
	{ after(grammarAccess.getDefinitionAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_1__1__Impl
	rule__Definition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getDefineKeyword_1_1()); }
	'define'
	{ after(grammarAccess.getDefinitionAccess().getDefineKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_1__2__Impl
	rule__Definition__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getLeftParenthesisKeyword_1_2()); }
	'('
	{ after(grammarAccess.getDefinitionAccess().getLeftParenthesisKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_1__3__Impl
	rule__Definition__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getVariableAssignment_1_3()); }
	(rule__Definition__VariableAssignment_1_3)
	{ after(grammarAccess.getDefinitionAccess().getVariableAssignment_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_1__4__Impl
	rule__Definition__Group_1__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getVariablesAssignment_1_4()); }
	(rule__Definition__VariablesAssignment_1_4)*
	{ after(grammarAccess.getDefinitionAccess().getVariablesAssignment_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_1__5__Impl
	rule__Definition__Group_1__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getRightParenthesisKeyword_1_5()); }
	')'
	{ after(grammarAccess.getDefinitionAccess().getRightParenthesisKeyword_1_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_1__6__Impl
	rule__Definition__Group_1__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getBodyAssignment_1_6()); }
	(rule__Definition__BodyAssignment_1_6)
	{ after(grammarAccess.getDefinitionAccess().getBodyAssignment_1_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_1__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getRightParenthesisKeyword_1_7()); }
	')'
	{ after(grammarAccess.getDefinitionAccess().getRightParenthesisKeyword_1_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Body__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Body__Group__0__Impl
	rule__Body__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBodyAccess().getDefinitionAssignment_0()); }
	(rule__Body__DefinitionAssignment_0)*
	{ after(grammarAccess.getBodyAccess().getDefinitionAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Body__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getBodyAccess().getExpressionAssignment_1()); }
		(rule__Body__ExpressionAssignment_1)
		{ after(grammarAccess.getBodyAccess().getExpressionAssignment_1()); }
	)
	(
		{ before(grammarAccess.getBodyAccess().getExpressionAssignment_1()); }
		(rule__Body__ExpressionAssignment_1)*
		{ after(grammarAccess.getBodyAccess().getExpressionAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group__0__Impl
	rule__Comparison__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getComparisonAction_0()); }
	()
	{ after(grammarAccess.getComparisonAccess().getComparisonAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getAlternatives_1()); }
	(rule__Comparison__Alternatives_1)
	{ after(grammarAccess.getComparisonAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_0__0__Impl
	rule__Comparison__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getLeftParenthesisKeyword_1_0_0()); }
	'('
	{ after(grammarAccess.getComparisonAccess().getLeftParenthesisKeyword_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_0__1__Impl
	rule__Comparison__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getAlternatives_1_0_1()); }
	(rule__Comparison__Alternatives_1_0_1)
	{ after(grammarAccess.getComparisonAccess().getAlternatives_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_0__2__Impl
	rule__Comparison__Group_1_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getNum1Assignment_1_0_2()); }
	(rule__Comparison__Num1Assignment_1_0_2)
	{ after(grammarAccess.getComparisonAccess().getNum1Assignment_1_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_0__3__Impl
	rule__Comparison__Group_1_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getNum2Assignment_1_0_3()); }
	(rule__Comparison__Num2Assignment_1_0_3)
	{ after(grammarAccess.getComparisonAccess().getNum2Assignment_1_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_0__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getRightParenthesisKeyword_1_0_4()); }
	')'
	{ after(grammarAccess.getComparisonAccess().getRightParenthesisKeyword_1_0_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Trigonometry__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Trigonometry__Group__0__Impl
	rule__Trigonometry__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Trigonometry__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrigonometryAccess().getTrigAssignment_0()); }
	(rule__Trigonometry__TrigAssignment_0)
	{ after(grammarAccess.getTrigonometryAccess().getTrigAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Trigonometry__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Trigonometry__Group__1__Impl
	rule__Trigonometry__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Trigonometry__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrigonometryAccess().getMATHTerminalRuleCall_1()); }
	RULE_MATH
	{ after(grammarAccess.getTrigonometryAccess().getMATHTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Trigonometry__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Trigonometry__Group__2__Impl
	rule__Trigonometry__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Trigonometry__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrigonometryAccess().getNumbAssignment_2()); }
	(rule__Trigonometry__NumbAssignment_2)
	{ after(grammarAccess.getTrigonometryAccess().getNumbAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Trigonometry__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Trigonometry__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Trigonometry__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrigonometryAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getTrigonometryAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Set__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Set__Group__0__Impl
	rule__Set__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getSetAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Set__Group__1__Impl
	rule__Set__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetAccess().getSetKeyword_1()); }
	'set!'
	{ after(grammarAccess.getSetAccess().getSetKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Set__Group__2__Impl
	rule__Set__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetAccess().getConsAssignment_2()); }
	(rule__Set__ConsAssignment_2)
	{ after(grammarAccess.getSetAccess().getConsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Set__Group__3__Impl
	rule__Set__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetAccess().getExpressionAssignment_3()); }
	(rule__Set__ExpressionAssignment_3)
	{ after(grammarAccess.getSetAccess().getExpressionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Set__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getSetAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Conditional__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group__0__Impl
	rule__Conditional__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getConditionalAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group__1__Impl
	rule__Conditional__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getIfKeyword_1()); }
	'if'
	{ after(grammarAccess.getConditionalAccess().getIfKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group__2__Impl
	rule__Conditional__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getConditionAssignment_2()); }
	(rule__Conditional__ConditionAssignment_2)
	{ after(grammarAccess.getConditionalAccess().getConditionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group__3__Impl
	rule__Conditional__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getIftrueAssignment_3()); }
	(rule__Conditional__IftrueAssignment_3)
	{ after(grammarAccess.getConditionalAccess().getIftrueAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group__4__Impl
	rule__Conditional__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getElseAssignment_4()); }
	(rule__Conditional__ElseAssignment_4)?
	{ after(grammarAccess.getConditionalAccess().getElseAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getConditionalAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NestedOperation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NestedOperation__Group__0__Impl
	rule__NestedOperation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NestedOperation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNestedOperationAccess().getNestedOperationAssignment_0()); }
	(rule__NestedOperation__NestedOperationAssignment_0)
	{ after(grammarAccess.getNestedOperationAccess().getNestedOperationAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NestedOperation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NestedOperation__Group__1__Impl
	rule__NestedOperation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NestedOperation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNestedOperationAccess().getCalculateAssignment_1()); }
	(rule__NestedOperation__CalculateAssignment_1)
	{ after(grammarAccess.getNestedOperationAccess().getCalculateAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NestedOperation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NestedOperation__Group__2__Impl
	rule__NestedOperation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NestedOperation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNestedOperationAccess().getOperationAssignment_2()); }
	(rule__NestedOperation__OperationAssignment_2)
	{ after(grammarAccess.getNestedOperationAccess().getOperationAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NestedOperation__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NestedOperation__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NestedOperation__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNestedOperationAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getNestedOperationAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group__0__Impl
	rule__Operation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getOperationAssignment_0()); }
	(rule__Operation__OperationAssignment_0)
	{ after(grammarAccess.getOperationAccess().getOperationAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group__1__Impl
	rule__Operation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getCalculateAssignment_1()); }
	(rule__Operation__CalculateAssignment_1)
	{ after(grammarAccess.getOperationAccess().getCalculateAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getOperationAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Calculate__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Calculate__Group__0__Impl
	rule__Calculate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Calculate__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCalculateAccess().getCalculateAssignment_0()); }
	(rule__Calculate__CalculateAssignment_0)
	{ after(grammarAccess.getCalculateAccess().getCalculateAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Calculate__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Calculate__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Calculate__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCalculateAccess().getNumbAssignment_1()); }
	(rule__Calculate__NumbAssignment_1)*
	{ after(grammarAccess.getCalculateAccess().getNumbAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListNumbers__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListNumbers__Group__0__Impl
	rule__ListNumbers__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListNumbers__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListNumbersAccess().getListNumbersAction_0()); }
	()
	{ after(grammarAccess.getListNumbersAccess().getListNumbersAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListNumbers__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListNumbers__Group__1__Impl
	rule__ListNumbers__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ListNumbers__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListNumbersAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getListNumbersAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListNumbers__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListNumbers__Group__2__Impl
	rule__ListNumbers__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ListNumbers__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListNumbersAccess().getListKeyword_2()); }
	'list'
	{ after(grammarAccess.getListNumbersAccess().getListKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListNumbers__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListNumbers__Group__3__Impl
	rule__ListNumbers__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ListNumbers__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListNumbersAccess().getNumberAssignment_3()); }
	(rule__ListNumbers__NumberAssignment_3)*
	{ after(grammarAccess.getListNumbersAccess().getNumberAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListNumbers__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListNumbers__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListNumbers__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListNumbersAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getListNumbersAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListLength__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListLength__Group__0__Impl
	rule__ListLength__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLength__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListLengthAccess().getListLengthAction_0()); }
	()
	{ after(grammarAccess.getListLengthAccess().getListLengthAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLength__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListLength__Group__1__Impl
	rule__ListLength__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLength__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListLengthAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getListLengthAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLength__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListLength__Group__2__Impl
	rule__ListLength__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLength__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListLengthAccess().getLengthKeyword_2()); }
	'length'
	{ after(grammarAccess.getListLengthAccess().getLengthKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLength__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListLength__Group__3__Impl
	rule__ListLength__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLength__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListLengthAccess().getListNumbersAssignment_3()); }
	(rule__ListLength__ListNumbersAssignment_3)
	{ after(grammarAccess.getListLengthAccess().getListNumbersAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLength__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListLength__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLength__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListLengthAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getListLengthAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Program__ProgramAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getProgramExpressionParserRuleCall_0_0()); }
		ruleExpression
		{ after(grammarAccess.getProgramAccess().getProgramExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__ProgramAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getProgramDefinitionParserRuleCall_1_0()); }
		ruleDefinition
		{ after(grammarAccess.getProgramAccess().getProgramDefinitionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__ConsAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefinitionAccess().getConsConstantParserRuleCall_0_2_0()); }
		ruleConstant
		{ after(grammarAccess.getDefinitionAccess().getConsConstantParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__ExpressionAssignment_0_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefinitionAccess().getExpressionExpressionParserRuleCall_0_3_0()); }
		ruleExpression
		{ after(grammarAccess.getDefinitionAccess().getExpressionExpressionParserRuleCall_0_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__VariableAssignment_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefinitionAccess().getVariableIDTerminalRuleCall_1_3_0()); }
		RULE_ID
		{ after(grammarAccess.getDefinitionAccess().getVariableIDTerminalRuleCall_1_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__VariablesAssignment_1_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefinitionAccess().getVariablesIDTerminalRuleCall_1_4_0()); }
		RULE_ID
		{ after(grammarAccess.getDefinitionAccess().getVariablesIDTerminalRuleCall_1_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__BodyAssignment_1_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefinitionAccess().getBodyBodyParserRuleCall_1_6_0()); }
		ruleBody
		{ after(grammarAccess.getDefinitionAccess().getBodyBodyParserRuleCall_1_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__DefinitionAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBodyAccess().getDefinitionDefinitionParserRuleCall_0_0()); }
		ruleDefinition
		{ after(grammarAccess.getBodyAccess().getDefinitionDefinitionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__ExpressionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBodyAccess().getExpressionExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getBodyAccess().getExpressionExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__ConstantAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getConstantConstantParserRuleCall_0_0()); }
		ruleConstant
		{ after(grammarAccess.getExpressionAccess().getConstantConstantParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__OperAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getOperOperationParserRuleCall_1_0()); }
		ruleOperation
		{ after(grammarAccess.getExpressionAccess().getOperOperationParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__CompAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getCompComparisonParserRuleCall_2_0()); }
		ruleComparison
		{ after(grammarAccess.getExpressionAccess().getCompComparisonParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__CondAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getCondConditionalParserRuleCall_3_0()); }
		ruleConditional
		{ after(grammarAccess.getExpressionAccess().getCondConditionalParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__SetAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getSetSetParserRuleCall_4_0()); }
		ruleSet
		{ after(grammarAccess.getExpressionAccess().getSetSetParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__TrigAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getTrigTrigonometryParserRuleCall_5_0()); }
		ruleTrigonometry
		{ after(grammarAccess.getExpressionAccess().getTrigTrigonometryParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__ListAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getListListNumbersParserRuleCall_6_0()); }
		ruleListNumbers
		{ after(grammarAccess.getExpressionAccess().getListListNumbersParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__ListLengthAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getListLengthListLengthParserRuleCall_7_0()); }
		ruleListLength
		{ after(grammarAccess.getExpressionAccess().getListLengthListLengthParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__NestedOperationAssignment_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getNestedOperationNestedOperationParserRuleCall_8_0()); }
		ruleNestedOperation
		{ after(grammarAccess.getExpressionAccess().getNestedOperationNestedOperationParserRuleCall_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__CalculateAssignment_9
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getCalculateCalculateParserRuleCall_9_0()); }
		ruleCalculate
		{ after(grammarAccess.getExpressionAccess().getCalculateCalculateParserRuleCall_9_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Num1Assignment_1_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getNum1NumberParserRuleCall_1_0_2_0()); }
		ruleNumber
		{ after(grammarAccess.getComparisonAccess().getNum1NumberParserRuleCall_1_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Num2Assignment_1_0_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getNum2NumberParserRuleCall_1_0_3_0()); }
		ruleNumber
		{ after(grammarAccess.getComparisonAccess().getNum2NumberParserRuleCall_1_0_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Trigonometry__TrigAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTrigonometryAccess().getTrigLeftParenthesisKeyword_0_0()); }
		(
			{ before(grammarAccess.getTrigonometryAccess().getTrigLeftParenthesisKeyword_0_0()); }
			'('
			{ after(grammarAccess.getTrigonometryAccess().getTrigLeftParenthesisKeyword_0_0()); }
		)
		{ after(grammarAccess.getTrigonometryAccess().getTrigLeftParenthesisKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Trigonometry__NumbAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTrigonometryAccess().getNumbNumberParserRuleCall_2_0()); }
		ruleNumber
		{ after(grammarAccess.getTrigonometryAccess().getNumbNumberParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__ConsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetAccess().getConsConstantParserRuleCall_2_0()); }
		ruleConstant
		{ after(grammarAccess.getSetAccess().getConsConstantParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__ExpressionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetAccess().getExpressionExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getSetAccess().getExpressionExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__ConditionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalAccess().getConditionComparisonParserRuleCall_2_0()); }
		ruleComparison
		{ after(grammarAccess.getConditionalAccess().getConditionComparisonParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__IftrueAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalAccess().getIftrueExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getConditionalAccess().getIftrueExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__ElseAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalAccess().getElseExpressionParserRuleCall_4_0()); }
		ruleExpression
		{ after(grammarAccess.getConditionalAccess().getElseExpressionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NestedOperation__NestedOperationAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNestedOperationAccess().getNestedOperationLeftParenthesisKeyword_0_0()); }
		(
			{ before(grammarAccess.getNestedOperationAccess().getNestedOperationLeftParenthesisKeyword_0_0()); }
			'('
			{ after(grammarAccess.getNestedOperationAccess().getNestedOperationLeftParenthesisKeyword_0_0()); }
		)
		{ after(grammarAccess.getNestedOperationAccess().getNestedOperationLeftParenthesisKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NestedOperation__CalculateAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNestedOperationAccess().getCalculateCalculateParserRuleCall_1_0()); }
		ruleCalculate
		{ after(grammarAccess.getNestedOperationAccess().getCalculateCalculateParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NestedOperation__OperationAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNestedOperationAccess().getOperationOperationParserRuleCall_2_0()); }
		ruleOperation
		{ after(grammarAccess.getNestedOperationAccess().getOperationOperationParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__OperationAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationAccess().getOperationLeftParenthesisKeyword_0_0()); }
		(
			{ before(grammarAccess.getOperationAccess().getOperationLeftParenthesisKeyword_0_0()); }
			'('
			{ after(grammarAccess.getOperationAccess().getOperationLeftParenthesisKeyword_0_0()); }
		)
		{ after(grammarAccess.getOperationAccess().getOperationLeftParenthesisKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__CalculateAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationAccess().getCalculateCalculateParserRuleCall_1_0()); }
		ruleCalculate
		{ after(grammarAccess.getOperationAccess().getCalculateCalculateParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Calculate__CalculateAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCalculateAccess().getCalculateOPERTerminalRuleCall_0_0()); }
		RULE_OPER
		{ after(grammarAccess.getCalculateAccess().getCalculateOPERTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Calculate__NumbAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCalculateAccess().getNumbNumberParserRuleCall_1_0()); }
		ruleNumber
		{ after(grammarAccess.getCalculateAccess().getNumbNumberParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListNumbers__NumberAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListNumbersAccess().getNumberNumberParserRuleCall_3_0()); }
		ruleNumber
		{ after(grammarAccess.getListNumbersAccess().getNumberNumberParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLength__ListNumbersAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListLengthAccess().getListNumbersListNumbersParserRuleCall_3_0()); }
		ruleListNumbers
		{ after(grammarAccess.getListLengthAccess().getListNumbersListNumbersParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_MATH : ('cos'|'abs'|'square');

RULE_LETTER : ('a'..'z'|'A'..'Z');

RULE_OPER : ('+'|'-'|'*'|'/'|'expt'|'quotient'|'remainder');

RULE_BOOL : ('#t'|'#f');

RULE_NEGATIVE : '-' RULE_DIGIT;

RULE_DOUBLE : RULE_DIGIT '.' RULE_DIGIT;

RULE_DIGIT : ('0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
