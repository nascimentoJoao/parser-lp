/*
 * generated by Xtext 2.16.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Program";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getProgramExpressionParserRuleCall_0_0());
				}
				lv_program_0_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					add(
						$current,
						"program",
						lv_program_0_0,
						"org.xtext.example.mydsl.MyDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getProgramDefinitionParserRuleCall_1_0());
				}
				lv_program_1_0=ruleDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					add(
						$current,
						"program",
						lv_program_1_0,
						"org.xtext.example.mydsl.MyDsl.Definition");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)*
;

// Entry rule entryRuleDefinition
entryRuleDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDefinitionRule()); }
	iv_ruleDefinition=ruleDefinition
	{ $current=$iv_ruleDefinition.current; }
	EOF;

// Rule Definition
ruleDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='('
			{
				newLeafNode(otherlv_0, grammarAccess.getDefinitionAccess().getLeftParenthesisKeyword_0_0());
			}
			otherlv_1='define'
			{
				newLeafNode(otherlv_1, grammarAccess.getDefinitionAccess().getDefineKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDefinitionAccess().getConsConstantParserRuleCall_0_2_0());
					}
					lv_cons_2_0=ruleConstant
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDefinitionRule());
						}
						set(
							$current,
							"cons",
							lv_cons_2_0,
							"org.xtext.example.mydsl.MyDsl.Constant");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getDefinitionAccess().getExpressionExpressionParserRuleCall_0_3_0());
					}
					lv_expression_3_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDefinitionRule());
						}
						set(
							$current,
							"expression",
							lv_expression_3_0,
							"org.xtext.example.mydsl.MyDsl.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getDefinitionAccess().getRightParenthesisKeyword_0_4());
			}
		)
		    |
		(
			otherlv_5='('
			{
				newLeafNode(otherlv_5, grammarAccess.getDefinitionAccess().getLeftParenthesisKeyword_1_0());
			}
			otherlv_6='define'
			{
				newLeafNode(otherlv_6, grammarAccess.getDefinitionAccess().getDefineKeyword_1_1());
			}
			otherlv_7='('
			{
				newLeafNode(otherlv_7, grammarAccess.getDefinitionAccess().getLeftParenthesisKeyword_1_2());
			}
			(
				(
					lv_variable_8_0=RULE_ID
					{
						newLeafNode(lv_variable_8_0, grammarAccess.getDefinitionAccess().getVariableIDTerminalRuleCall_1_3_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDefinitionRule());
						}
						setWithLastConsumed(
							$current,
							"variable",
							lv_variable_8_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			(
				(
					lv_variables_9_0=RULE_ID
					{
						newLeafNode(lv_variables_9_0, grammarAccess.getDefinitionAccess().getVariablesIDTerminalRuleCall_1_4_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDefinitionRule());
						}
						addWithLastConsumed(
							$current,
							"variables",
							lv_variables_9_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)*
			otherlv_10=')'
			{
				newLeafNode(otherlv_10, grammarAccess.getDefinitionAccess().getRightParenthesisKeyword_1_5());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDefinitionAccess().getBodyBodyParserRuleCall_1_6_0());
					}
					lv_body_11_0=ruleBody
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDefinitionRule());
						}
						set(
							$current,
							"body",
							lv_body_11_0,
							"org.xtext.example.mydsl.MyDsl.Body");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_12=')'
			{
				newLeafNode(otherlv_12, grammarAccess.getDefinitionAccess().getRightParenthesisKeyword_1_7());
			}
		)
	)
;

// Entry rule entryRuleBody
entryRuleBody returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBodyRule()); }
	iv_ruleBody=ruleBody
	{ $current=$iv_ruleBody.current; }
	EOF;

// Rule Body
ruleBody returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getBodyAccess().getDefinitionDefinitionParserRuleCall_0_0());
				}
				lv_definition_0_0=ruleDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBodyRule());
					}
					add(
						$current,
						"definition",
						lv_definition_0_0,
						"org.xtext.example.mydsl.MyDsl.Definition");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getBodyAccess().getExpressionExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBodyRule());
					}
					add(
						$current,
						"expression",
						lv_expression_1_0,
						"org.xtext.example.mydsl.MyDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getConstantConstantParserRuleCall_0_0());
				}
				lv_constant_0_0=ruleConstant
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"constant",
						lv_constant_0_0,
						"org.xtext.example.mydsl.MyDsl.Constant");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getOperOperationParserRuleCall_1_0());
				}
				lv_oper_1_0=ruleOperation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"oper",
						lv_oper_1_0,
						"org.xtext.example.mydsl.MyDsl.Operation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getCompComparisonParserRuleCall_2_0());
				}
				lv_comp_2_0=ruleComparison
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"comp",
						lv_comp_2_0,
						"org.xtext.example.mydsl.MyDsl.Comparison");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getCondConditionalParserRuleCall_3_0());
				}
				lv_cond_3_0=ruleConditional
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"cond",
						lv_cond_3_0,
						"org.xtext.example.mydsl.MyDsl.Conditional");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getSetSetParserRuleCall_4_0());
				}
				lv_set_4_0=ruleSet
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"set",
						lv_set_4_0,
						"org.xtext.example.mydsl.MyDsl.Set");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getTrigTrigonometryParserRuleCall_5_0());
				}
				lv_trig_5_0=ruleTrigonometry
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"trig",
						lv_trig_5_0,
						"org.xtext.example.mydsl.MyDsl.Trigonometry");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getListListNumbersParserRuleCall_6_0());
				}
				lv_list_6_0=ruleListNumbers
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"list",
						lv_list_6_0,
						"org.xtext.example.mydsl.MyDsl.ListNumbers");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getListLengthListLengthParserRuleCall_7_0());
				}
				lv_listLength_7_0=ruleListLength
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"listLength",
						lv_listLength_7_0,
						"org.xtext.example.mydsl.MyDsl.ListLength");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getNestedOperationNestedOperationParserRuleCall_8_0());
				}
				lv_nestedOperation_8_0=ruleNestedOperation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"nestedOperation",
						lv_nestedOperation_8_0,
						"org.xtext.example.mydsl.MyDsl.NestedOperation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getCalculateCalculateParserRuleCall_9_0());
				}
				lv_calculate_9_0=ruleCalculate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"calculate",
						lv_calculate_9_0,
						"org.xtext.example.mydsl.MyDsl.Calculate");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleComparison
entryRuleComparison returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparisonRule()); }
	iv_ruleComparison=ruleComparison
	{ $current=$iv_ruleComparison.current; }
	EOF;

// Rule Comparison
ruleComparison returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getComparisonAccess().getComparisonAction_0(),
					$current);
			}
		)
		(
			(
				otherlv_1='('
				{
					newLeafNode(otherlv_1, grammarAccess.getComparisonAccess().getLeftParenthesisKeyword_1_0_0());
				}
				(
					otherlv_2='<'
					{
						newLeafNode(otherlv_2, grammarAccess.getComparisonAccess().getLessThanSignKeyword_1_0_1_0());
					}
					    |
					otherlv_3='>'
					{
						newLeafNode(otherlv_3, grammarAccess.getComparisonAccess().getGreaterThanSignKeyword_1_0_1_1());
					}
					    |
					otherlv_4='='
					{
						newLeafNode(otherlv_4, grammarAccess.getComparisonAccess().getEqualsSignKeyword_1_0_1_2());
					}
					    |
					otherlv_5='>='
					{
						newLeafNode(otherlv_5, grammarAccess.getComparisonAccess().getGreaterThanSignEqualsSignKeyword_1_0_1_3());
					}
					    |
					otherlv_6='<='
					{
						newLeafNode(otherlv_6, grammarAccess.getComparisonAccess().getLessThanSignEqualsSignKeyword_1_0_1_4());
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getComparisonAccess().getNum1NumberParserRuleCall_1_0_2_0());
						}
						lv_num1_7_0=ruleNumber
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getComparisonRule());
							}
							set(
								$current,
								"num1",
								lv_num1_7_0,
								"org.xtext.example.mydsl.MyDsl.Number");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getComparisonAccess().getNum2NumberParserRuleCall_1_0_3_0());
						}
						lv_num2_8_0=ruleNumber
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getComparisonRule());
							}
							set(
								$current,
								"num2",
								lv_num2_8_0,
								"org.xtext.example.mydsl.MyDsl.Number");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_9=')'
				{
					newLeafNode(otherlv_9, grammarAccess.getComparisonAccess().getRightParenthesisKeyword_1_0_4());
				}
			)
			    |
			this_BOOL_10=RULE_BOOL
			{
				newLeafNode(this_BOOL_10, grammarAccess.getComparisonAccess().getBOOLTerminalRuleCall_1_1());
			}
		)
	)
;

// Entry rule entryRuleTrigonometry
entryRuleTrigonometry returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTrigonometryRule()); }
	iv_ruleTrigonometry=ruleTrigonometry
	{ $current=$iv_ruleTrigonometry.current; }
	EOF;

// Rule Trigonometry
ruleTrigonometry returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_trig_0_0='('
				{
					newLeafNode(lv_trig_0_0, grammarAccess.getTrigonometryAccess().getTrigLeftParenthesisKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTrigonometryRule());
					}
					setWithLastConsumed($current, "trig", lv_trig_0_0, "(");
				}
			)
		)
		this_MATH_1=RULE_MATH
		{
			newLeafNode(this_MATH_1, grammarAccess.getTrigonometryAccess().getMATHTerminalRuleCall_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTrigonometryAccess().getNumbNumberParserRuleCall_2_0());
				}
				lv_numb_2_0=ruleNumber
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTrigonometryRule());
					}
					add(
						$current,
						"numb",
						lv_numb_2_0,
						"org.xtext.example.mydsl.MyDsl.Number");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getTrigonometryAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleSet
entryRuleSet returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSetRule()); }
	iv_ruleSet=ruleSet
	{ $current=$iv_ruleSet.current; }
	EOF;

// Rule Set
ruleSet returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getSetAccess().getLeftParenthesisKeyword_0());
		}
		otherlv_1='set!'
		{
			newLeafNode(otherlv_1, grammarAccess.getSetAccess().getSetKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSetAccess().getConsConstantParserRuleCall_2_0());
				}
				lv_cons_2_0=ruleConstant
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSetRule());
					}
					set(
						$current,
						"cons",
						lv_cons_2_0,
						"org.xtext.example.mydsl.MyDsl.Constant");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSetAccess().getExpressionExpressionParserRuleCall_3_0());
				}
				lv_expression_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSetRule());
					}
					set(
						$current,
						"expression",
						lv_expression_3_0,
						"org.xtext.example.mydsl.MyDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getSetAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleConditional
entryRuleConditional returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionalRule()); }
	iv_ruleConditional=ruleConditional
	{ $current=$iv_ruleConditional.current; }
	EOF;

// Rule Conditional
ruleConditional returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getConditionalAccess().getLeftParenthesisKeyword_0());
		}
		otherlv_1='if'
		{
			newLeafNode(otherlv_1, grammarAccess.getConditionalAccess().getIfKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalAccess().getConditionComparisonParserRuleCall_2_0());
				}
				lv_condition_2_0=ruleComparison
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalRule());
					}
					set(
						$current,
						"condition",
						lv_condition_2_0,
						"org.xtext.example.mydsl.MyDsl.Comparison");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalAccess().getIftrueExpressionParserRuleCall_3_0());
				}
				lv_iftrue_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalRule());
					}
					set(
						$current,
						"iftrue",
						lv_iftrue_3_0,
						"org.xtext.example.mydsl.MyDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalAccess().getElseExpressionParserRuleCall_4_0());
				}
				lv_else_4_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalRule());
					}
					set(
						$current,
						"else",
						lv_else_4_0,
						"org.xtext.example.mydsl.MyDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getConditionalAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleConstant
entryRuleConstant returns [String current=null]:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	iv_ruleConstant=ruleConstant
	{ $current=$iv_ruleConstant.current.getText(); }
	EOF;

// Rule Constant
ruleConstant returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_BOOL_0=RULE_BOOL
		{
			$current.merge(this_BOOL_0);
		}
		{
			newLeafNode(this_BOOL_0, grammarAccess.getConstantAccess().getBOOLTerminalRuleCall_0());
		}
		    |
		this_DIGIT_1=RULE_DIGIT
		{
			$current.merge(this_DIGIT_1);
		}
		{
			newLeafNode(this_DIGIT_1, grammarAccess.getConstantAccess().getDIGITTerminalRuleCall_1());
		}
		    |
		this_DOUBLE_2=RULE_DOUBLE
		{
			$current.merge(this_DOUBLE_2);
		}
		{
			newLeafNode(this_DOUBLE_2, grammarAccess.getConstantAccess().getDOUBLETerminalRuleCall_2());
		}
		    |
		this_STRING_3=RULE_STRING
		{
			$current.merge(this_STRING_3);
		}
		{
			newLeafNode(this_STRING_3, grammarAccess.getConstantAccess().getSTRINGTerminalRuleCall_3());
		}
		    |
		this_ID_4=RULE_ID
		{
			$current.merge(this_ID_4);
		}
		{
			newLeafNode(this_ID_4, grammarAccess.getConstantAccess().getIDTerminalRuleCall_4());
		}
		    |
		this_LETTER_5=RULE_LETTER
		{
			$current.merge(this_LETTER_5);
		}
		{
			newLeafNode(this_LETTER_5, grammarAccess.getConstantAccess().getLETTERTerminalRuleCall_5());
		}
		    |
		this_NEGATIVE_6=RULE_NEGATIVE
		{
			$current.merge(this_NEGATIVE_6);
		}
		{
			newLeafNode(this_NEGATIVE_6, grammarAccess.getConstantAccess().getNEGATIVETerminalRuleCall_6());
		}
	)
;

// Entry rule entryRuleNestedOperation
entryRuleNestedOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNestedOperationRule()); }
	iv_ruleNestedOperation=ruleNestedOperation
	{ $current=$iv_ruleNestedOperation.current; }
	EOF;

// Rule NestedOperation
ruleNestedOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_nestedOperation_0_0='('
				{
					newLeafNode(lv_nestedOperation_0_0, grammarAccess.getNestedOperationAccess().getNestedOperationLeftParenthesisKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNestedOperationRule());
					}
					setWithLastConsumed($current, "nestedOperation", lv_nestedOperation_0_0, "(");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getNestedOperationAccess().getCalculateCalculateParserRuleCall_1_0());
				}
				lv_calculate_1_0=ruleCalculate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNestedOperationRule());
					}
					add(
						$current,
						"calculate",
						lv_calculate_1_0,
						"org.xtext.example.mydsl.MyDsl.Calculate");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getNestedOperationAccess().getOperationOperationParserRuleCall_2_0());
				}
				lv_operation_2_0=ruleOperation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNestedOperationRule());
					}
					add(
						$current,
						"operation",
						lv_operation_2_0,
						"org.xtext.example.mydsl.MyDsl.Operation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getNestedOperationAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleOperation
entryRuleOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperationRule()); }
	iv_ruleOperation=ruleOperation
	{ $current=$iv_ruleOperation.current; }
	EOF;

// Rule Operation
ruleOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_operation_0_0='('
				{
					newLeafNode(lv_operation_0_0, grammarAccess.getOperationAccess().getOperationLeftParenthesisKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOperationRule());
					}
					setWithLastConsumed($current, "operation", lv_operation_0_0, "(");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationAccess().getCalculateCalculateParserRuleCall_1_0());
				}
				lv_calculate_1_0=ruleCalculate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationRule());
					}
					add(
						$current,
						"calculate",
						lv_calculate_1_0,
						"org.xtext.example.mydsl.MyDsl.Calculate");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getOperationAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleCalculate
entryRuleCalculate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCalculateRule()); }
	iv_ruleCalculate=ruleCalculate
	{ $current=$iv_ruleCalculate.current; }
	EOF;

// Rule Calculate
ruleCalculate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_calculate_0_0=RULE_OPER
				{
					newLeafNode(lv_calculate_0_0, grammarAccess.getCalculateAccess().getCalculateOPERTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCalculateRule());
					}
					setWithLastConsumed(
						$current,
						"calculate",
						lv_calculate_0_0,
						"org.xtext.example.mydsl.MyDsl.OPER");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCalculateAccess().getNumbNumberParserRuleCall_1_0());
				}
				lv_numb_1_0=ruleNumber
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCalculateRule());
					}
					add(
						$current,
						"numb",
						lv_numb_1_0,
						"org.xtext.example.mydsl.MyDsl.Number");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleListNumbers
entryRuleListNumbers returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListNumbersRule()); }
	iv_ruleListNumbers=ruleListNumbers
	{ $current=$iv_ruleListNumbers.current; }
	EOF;

// Rule ListNumbers
ruleListNumbers returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getListNumbersAccess().getListNumbersAction_0(),
					$current);
			}
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getListNumbersAccess().getLeftParenthesisKeyword_1());
		}
		otherlv_2='list'
		{
			newLeafNode(otherlv_2, grammarAccess.getListNumbersAccess().getListKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getListNumbersAccess().getNumberNumberParserRuleCall_3_0());
				}
				lv_number_3_0=ruleNumber
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getListNumbersRule());
					}
					add(
						$current,
						"number",
						lv_number_3_0,
						"org.xtext.example.mydsl.MyDsl.Number");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getListNumbersAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleListLength
entryRuleListLength returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListLengthRule()); }
	iv_ruleListLength=ruleListLength
	{ $current=$iv_ruleListLength.current; }
	EOF;

// Rule ListLength
ruleListLength returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getListLengthAccess().getListLengthAction_0(),
					$current);
			}
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getListLengthAccess().getLeftParenthesisKeyword_1());
		}
		otherlv_2='length'
		{
			newLeafNode(otherlv_2, grammarAccess.getListLengthAccess().getLengthKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getListLengthAccess().getListNumbersListNumbersParserRuleCall_3_0());
				}
				lv_listNumbers_3_0=ruleListNumbers
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getListLengthRule());
					}
					add(
						$current,
						"listNumbers",
						lv_listNumbers_3_0,
						"org.xtext.example.mydsl.MyDsl.ListNumbers");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getListLengthAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleNumber
entryRuleNumber returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNumberRule()); }
	iv_ruleNumber=ruleNumber
	{ $current=$iv_ruleNumber.current.getText(); }
	EOF;

// Rule Number
ruleNumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_DIGIT_0=RULE_DIGIT
		{
			$current.merge(this_DIGIT_0);
		}
		{
			newLeafNode(this_DIGIT_0, grammarAccess.getNumberAccess().getDIGITTerminalRuleCall_0());
		}
		    |
		this_DOUBLE_1=RULE_DOUBLE
		{
			$current.merge(this_DOUBLE_1);
		}
		{
			newLeafNode(this_DOUBLE_1, grammarAccess.getNumberAccess().getDOUBLETerminalRuleCall_1());
		}
	)
;

RULE_MATH : ('cos'|'abs'|'square');

RULE_LETTER : ('a'..'z'|'A'..'Z');

RULE_OPER : ('+'|'-'|'*'|'/'|'expt'|'quotient'|'remainder');

RULE_BOOL : ('#t'|'#f');

RULE_NEGATIVE : '-' RULE_DIGIT;

RULE_DOUBLE : RULE_DIGIT '.' RULE_DIGIT;

RULE_DIGIT : ('0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
