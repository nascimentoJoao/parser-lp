/*
 * generated by Xtext 2.16.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Program");
		private final Assignment cProgramAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cProgramFormParserRuleCall_0 = (RuleCall)cProgramAssignment.eContents().get(0);
		
		//Program:
		//	program+=Form*;
		@Override public ParserRule getRule() { return rule; }
		
		//program+=Form*
		public Assignment getProgramAssignment() { return cProgramAssignment; }
		
		//Form
		public RuleCall getProgramFormParserRuleCall_0() { return cProgramFormParserRuleCall_0; }
	}
	public class FormElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Form");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cDefinitionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cDefinitionDefinitionParserRuleCall_0_0 = (RuleCall)cDefinitionAssignment_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//Form:
		//	definition+=Definition | expression+=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//definition+=Definition | expression+=Expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//definition+=Definition
		public Assignment getDefinitionAssignment_0() { return cDefinitionAssignment_0; }
		
		//Definition
		public RuleCall getDefinitionDefinitionParserRuleCall_0_0() { return cDefinitionDefinitionParserRuleCall_0_0; }
		
		//expression+=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}
	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Definition");
		private final Assignment cVariableDefinitionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVariableDefinitionVariableDefinitionParserRuleCall_0 = (RuleCall)cVariableDefinitionAssignment.eContents().get(0);
		
		//Definition:
		//	variableDefinition=VariableDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//variableDefinition=VariableDefinition
		public Assignment getVariableDefinitionAssignment() { return cVariableDefinitionAssignment; }
		
		//VariableDefinition
		public RuleCall getVariableDefinitionVariableDefinitionParserRuleCall_0() { return cVariableDefinitionVariableDefinitionParserRuleCall_0; }
	}
	public class VariableDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.VariableDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cDefineKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cVariableAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cVariableIDTerminalRuleCall_0_2_0 = (RuleCall)cVariableAssignment_0_2.eContents().get(0);
		private final Assignment cExpressionAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_0_3_0 = (RuleCall)cExpressionAssignment_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cDefineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cVariableAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cVariableIDTerminalRuleCall_1_3_0 = (RuleCall)cVariableAssignment_1_3.eContents().get(0);
		private final Assignment cVariablesAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cVariablesIDTerminalRuleCall_1_4_0 = (RuleCall)cVariablesAssignment_1_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cBodyAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cBodyBodyParserRuleCall_1_6_0 = (RuleCall)cBodyAssignment_1_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cDefineKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cVariableAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cVariableIDTerminalRuleCall_2_3_0 = (RuleCall)cVariableAssignment_2_3.eContents().get(0);
		private final Assignment cVariablesAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cVariablesIDTerminalRuleCall_2_4_0 = (RuleCall)cVariablesAssignment_2_4.eContents().get(0);
		private final Keyword cFullStopKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Assignment cVarAssignment_2_6 = (Assignment)cGroup_2.eContents().get(6);
		private final RuleCall cVarIDTerminalRuleCall_2_6_0 = (RuleCall)cVarAssignment_2_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_7 = (Keyword)cGroup_2.eContents().get(7);
		private final Assignment cBodyAssignment_2_8 = (Assignment)cGroup_2.eContents().get(8);
		private final RuleCall cBodyBodyParserRuleCall_2_8_0 = (RuleCall)cBodyAssignment_2_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_9 = (Keyword)cGroup_2.eContents().get(9);
		
		//VariableDefinition:
		//	'(' 'define' variable=ID expression=Expression ')' |
		//	'(' 'define' '(' variable=ID variables+=ID* ')' body=Body ')' |
		//	'(' 'define' '(' variable=ID variables+=ID* '.' var=ID ')' body=Body ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' 'define' variable=ID expression=Expression ')' | '(' 'define' '(' variable=ID variables+=ID* ')' body=Body ')' | '('
		//'define' '(' variable=ID variables+=ID* '.' var=ID ')' body=Body ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' 'define' variable=ID expression=Expression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//'define'
		public Keyword getDefineKeyword_0_1() { return cDefineKeyword_0_1; }
		
		//variable=ID
		public Assignment getVariableAssignment_0_2() { return cVariableAssignment_0_2; }
		
		//ID
		public RuleCall getVariableIDTerminalRuleCall_0_2_0() { return cVariableIDTerminalRuleCall_0_2_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_0_3() { return cExpressionAssignment_0_3; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_3_0() { return cExpressionExpressionParserRuleCall_0_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }
		
		//'(' 'define' '(' variable=ID variables+=ID* ')' body=Body ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//'define'
		public Keyword getDefineKeyword_1_1() { return cDefineKeyword_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }
		
		//variable=ID
		public Assignment getVariableAssignment_1_3() { return cVariableAssignment_1_3; }
		
		//ID
		public RuleCall getVariableIDTerminalRuleCall_1_3_0() { return cVariableIDTerminalRuleCall_1_3_0; }
		
		//variables+=ID*
		public Assignment getVariablesAssignment_1_4() { return cVariablesAssignment_1_4; }
		
		//ID
		public RuleCall getVariablesIDTerminalRuleCall_1_4_0() { return cVariablesIDTerminalRuleCall_1_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }
		
		//body=Body
		public Assignment getBodyAssignment_1_6() { return cBodyAssignment_1_6; }
		
		//Body
		public RuleCall getBodyBodyParserRuleCall_1_6_0() { return cBodyBodyParserRuleCall_1_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_7() { return cRightParenthesisKeyword_1_7; }
		
		//'(' 'define' '(' variable=ID variables+=ID* '.' var=ID ')' body=Body ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//'define'
		public Keyword getDefineKeyword_2_1() { return cDefineKeyword_2_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_2() { return cLeftParenthesisKeyword_2_2; }
		
		//variable=ID
		public Assignment getVariableAssignment_2_3() { return cVariableAssignment_2_3; }
		
		//ID
		public RuleCall getVariableIDTerminalRuleCall_2_3_0() { return cVariableIDTerminalRuleCall_2_3_0; }
		
		//variables+=ID*
		public Assignment getVariablesAssignment_2_4() { return cVariablesAssignment_2_4; }
		
		//ID
		public RuleCall getVariablesIDTerminalRuleCall_2_4_0() { return cVariablesIDTerminalRuleCall_2_4_0; }
		
		//'.'
		public Keyword getFullStopKeyword_2_5() { return cFullStopKeyword_2_5; }
		
		//var=ID
		public Assignment getVarAssignment_2_6() { return cVarAssignment_2_6; }
		
		//ID
		public RuleCall getVarIDTerminalRuleCall_2_6_0() { return cVarIDTerminalRuleCall_2_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_7() { return cRightParenthesisKeyword_2_7; }
		
		//body=Body
		public Assignment getBodyAssignment_2_8() { return cBodyAssignment_2_8; }
		
		//Body
		public RuleCall getBodyBodyParserRuleCall_2_8_0() { return cBodyBodyParserRuleCall_2_8_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_9() { return cRightParenthesisKeyword_2_9; }
	}
	public class BodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Body");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDefinitionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDefinitionDefinitionParserRuleCall_0_0 = (RuleCall)cDefinitionAssignment_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//Body:
		//	definition+=Definition* expression+=Expression+;
		@Override public ParserRule getRule() { return rule; }
		
		//definition+=Definition* expression+=Expression+
		public Group getGroup() { return cGroup; }
		
		//definition+=Definition*
		public Assignment getDefinitionAssignment_0() { return cDefinitionAssignment_0; }
		
		//Definition
		public RuleCall getDefinitionDefinitionParserRuleCall_0_0() { return cDefinitionDefinitionParserRuleCall_0_0; }
		
		//expression+=Expression+
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cConstantAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cConstantConstantParserRuleCall_0_0 = (RuleCall)cConstantAssignment_0.eContents().get(0);
		private final Assignment cOperAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOperOperationParserRuleCall_1_0 = (RuleCall)cOperAssignment_1.eContents().get(0);
		private final Assignment cCondAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cCondConditionalParserRuleCall_2_0 = (RuleCall)cCondAssignment_2.eContents().get(0);
		private final Assignment cSetAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cSetSetParserRuleCall_3_0 = (RuleCall)cSetAssignment_3.eContents().get(0);
		private final Assignment cAppAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cAppApplicationParserRuleCall_4_0 = (RuleCall)cAppAssignment_4.eContents().get(0);
		private final Assignment cMultAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cMultMultipleConditionParserRuleCall_5_0 = (RuleCall)cMultAssignment_5.eContents().get(0);
		
		//Expression:
		//	constant=Constant
		//	| oper=Operation
		//	| cond=Conditional
		//	| set=Set
		//	| app=Application
		//	| mult=MultipleCondition;
		@Override public ParserRule getRule() { return rule; }
		
		//constant=Constant | oper=Operation | cond=Conditional | set=Set | app=Application | mult=MultipleCondition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//constant=Constant
		public Assignment getConstantAssignment_0() { return cConstantAssignment_0; }
		
		//Constant
		public RuleCall getConstantConstantParserRuleCall_0_0() { return cConstantConstantParserRuleCall_0_0; }
		
		//oper=Operation
		public Assignment getOperAssignment_1() { return cOperAssignment_1; }
		
		//Operation
		public RuleCall getOperOperationParserRuleCall_1_0() { return cOperOperationParserRuleCall_1_0; }
		
		//cond=Conditional
		public Assignment getCondAssignment_2() { return cCondAssignment_2; }
		
		//Conditional
		public RuleCall getCondConditionalParserRuleCall_2_0() { return cCondConditionalParserRuleCall_2_0; }
		
		//set=Set
		public Assignment getSetAssignment_3() { return cSetAssignment_3; }
		
		//Set
		public RuleCall getSetSetParserRuleCall_3_0() { return cSetSetParserRuleCall_3_0; }
		
		//app=Application
		public Assignment getAppAssignment_4() { return cAppAssignment_4; }
		
		//Application
		public RuleCall getAppApplicationParserRuleCall_4_0() { return cAppApplicationParserRuleCall_4_0; }
		
		//mult=MultipleCondition
		public Assignment getMultAssignment_5() { return cMultAssignment_5; }
		
		//MultipleCondition
		public RuleCall getMultMultipleConditionParserRuleCall_5_0() { return cMultMultipleConditionParserRuleCall_5_0; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cComparisonAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_1 = (Alternatives)cGroup_1_0.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0_1_0 = (Keyword)cAlternatives_1_0_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_0_1_1 = (Keyword)cAlternatives_1_0_1.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0_1_2 = (Keyword)cAlternatives_1_0_1.eContents().get(2);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_0_1_3 = (Keyword)cAlternatives_1_0_1.eContents().get(3);
		private final Keyword cLessThanSignEqualsSignKeyword_1_0_1_4 = (Keyword)cAlternatives_1_0_1.eContents().get(4);
		private final Assignment cNum1Assignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cNum1NUMBERTerminalRuleCall_1_0_2_0 = (RuleCall)cNum1Assignment_1_0_2.eContents().get(0);
		private final Assignment cNum2Assignment_1_0_3 = (Assignment)cGroup_1_0.eContents().get(3);
		private final RuleCall cNum2NUMBERTerminalRuleCall_1_0_3_0 = (RuleCall)cNum2Assignment_1_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_4 = (Keyword)cGroup_1_0.eContents().get(4);
		private final RuleCall cBOOLTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//Comparison:
		//	{Comparison} ('(' ('<' | '>' | '=' | '>=' | '<=') num1=NUMBER num2=NUMBER ')' | BOOL);
		@Override public ParserRule getRule() { return rule; }
		
		//{Comparison} ('(' ('<' | '>' | '=' | '>=' | '<=') num1=NUMBER num2=NUMBER ')' | BOOL)
		public Group getGroup() { return cGroup; }
		
		//{Comparison}
		public Action getComparisonAction_0() { return cComparisonAction_0; }
		
		//'(' ('<' | '>' | '=' | '>=' | '<=') num1=NUMBER num2=NUMBER ')' | BOOL
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'(' ('<' | '>' | '=' | '>=' | '<=') num1=NUMBER num2=NUMBER ')'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0_0() { return cLeftParenthesisKeyword_1_0_0; }
		
		//'<' | '>' | '=' | '>=' | '<='
		public Alternatives getAlternatives_1_0_1() { return cAlternatives_1_0_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_0_1_0() { return cLessThanSignKeyword_1_0_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_0_1_1() { return cGreaterThanSignKeyword_1_0_1_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0_1_2() { return cEqualsSignKeyword_1_0_1_2; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_1_0_1_3() { return cGreaterThanSignEqualsSignKeyword_1_0_1_3; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_1_0_1_4() { return cLessThanSignEqualsSignKeyword_1_0_1_4; }
		
		//num1=NUMBER
		public Assignment getNum1Assignment_1_0_2() { return cNum1Assignment_1_0_2; }
		
		//NUMBER
		public RuleCall getNum1NUMBERTerminalRuleCall_1_0_2_0() { return cNum1NUMBERTerminalRuleCall_1_0_2_0; }
		
		//num2=NUMBER
		public Assignment getNum2Assignment_1_0_3() { return cNum2Assignment_1_0_3; }
		
		//NUMBER
		public RuleCall getNum2NUMBERTerminalRuleCall_1_0_3_0() { return cNum2NUMBERTerminalRuleCall_1_0_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_0_4() { return cRightParenthesisKeyword_1_0_4; }
		
		//BOOL
		public RuleCall getBOOLTerminalRuleCall_1_1() { return cBOOLTerminalRuleCall_1_1; }
	}
	public class MultipleConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MultipleCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCondKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCompAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCompComparisonParserRuleCall_2_1_0 = (RuleCall)cCompAssignment_2_1.eContents().get(0);
		private final Assignment cExpAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExpExpressionParserRuleCall_2_2_0 = (RuleCall)cExpAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cElseKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cExpressionAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_3_2_0 = (RuleCall)cExpressionAssignment_3_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//MultipleCondition:
		//	'(' 'cond' ('(' comp+=Comparison exp+=Expression ')') ('(' 'else' expression=Expression ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' 'cond' ('(' comp+=Comparison exp+=Expression ')') ('(' 'else' expression=Expression ')')?
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//'cond'
		public Keyword getCondKeyword_1() { return cCondKeyword_1; }
		
		//'(' comp+=Comparison exp+=Expression ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//comp+=Comparison
		public Assignment getCompAssignment_2_1() { return cCompAssignment_2_1; }
		
		//Comparison
		public RuleCall getCompComparisonParserRuleCall_2_1_0() { return cCompComparisonParserRuleCall_2_1_0; }
		
		//exp+=Expression
		public Assignment getExpAssignment_2_2() { return cExpAssignment_2_2; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_2_2_0() { return cExpExpressionParserRuleCall_2_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
		
		//('(' 'else' expression=Expression ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//'else'
		public Keyword getElseKeyword_3_1() { return cElseKeyword_3_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_3_2() { return cExpressionAssignment_3_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_2_0() { return cExpressionExpressionParserRuleCall_3_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
	}
	public class ApplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Application");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Assignment cExpressionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionsExpressionParserRuleCall_2_0 = (RuleCall)cExpressionsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Application:
		//	'(' expression=Expression expressions+=Expression* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' expression=Expression expressions+=Expression* ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
		
		//expressions+=Expression*
		public Assignment getExpressionsAssignment_2() { return cExpressionsAssignment_2; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_2_0() { return cExpressionsExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class SetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Set");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConsConstantParserRuleCall_2_0 = (RuleCall)cConsAssignment_2.eContents().get(0);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Set:
		//	'(' 'set!' cons=Constant expression=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' 'set!' cons=Constant expression=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//'set!'
		public Keyword getSetKeyword_1() { return cSetKeyword_1; }
		
		//cons=Constant
		public Assignment getConsAssignment_2() { return cConsAssignment_2; }
		
		//Constant
		public RuleCall getConsConstantParserRuleCall_2_0() { return cConsConstantParserRuleCall_2_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ConditionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Conditional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionComparisonParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Assignment cIftrueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIftrueExpressionParserRuleCall_3_0 = (RuleCall)cIftrueAssignment_3.eContents().get(0);
		private final Assignment cElseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElseExpressionParserRuleCall_4_0 = (RuleCall)cElseAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Conditional:
		//	'(' 'if' condition=Comparison iftrue=Expression else=Expression? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' 'if' condition=Comparison iftrue=Expression else=Expression? ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//condition=Comparison
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//Comparison
		public RuleCall getConditionComparisonParserRuleCall_2_0() { return cConditionComparisonParserRuleCall_2_0; }
		
		//iftrue=Expression
		public Assignment getIftrueAssignment_3() { return cIftrueAssignment_3; }
		
		//Expression
		public RuleCall getIftrueExpressionParserRuleCall_3_0() { return cIftrueExpressionParserRuleCall_3_0; }
		
		//else=Expression?
		public Assignment getElseAssignment_4() { return cElseAssignment_4; }
		
		//Expression
		public RuleCall getElseExpressionParserRuleCall_4_0() { return cElseExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Constant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBOOLTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDOUBLETerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSTRINGTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cIDTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cLETTERTerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Constant:
		//	BOOL | INT | DOUBLE | STRING | ID | LETTER;
		@Override public ParserRule getRule() { return rule; }
		
		//BOOL | INT | DOUBLE | STRING | ID | LETTER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BOOL
		public RuleCall getBOOLTerminalRuleCall_0() { return cBOOLTerminalRuleCall_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//DOUBLE
		public RuleCall getDOUBLETerminalRuleCall_2() { return cDOUBLETerminalRuleCall_2; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_3() { return cSTRINGTerminalRuleCall_3; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_4() { return cIDTerminalRuleCall_4; }
		
		//LETTER
		public RuleCall getLETTERTerminalRuleCall_5() { return cLETTERTerminalRuleCall_5; }
	}
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Operation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cOperationLeftParenthesisKeyword_0_0 = (Keyword)cOperationAssignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorOPERTerminalRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Keyword cSKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNumbAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNumbNUMBERTerminalRuleCall_3_0 = (RuleCall)cNumbAssignment_3.eContents().get(0);
		private final Keyword cSKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNumb2Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNumb2NUMBERTerminalRuleCall_5_0 = (RuleCall)cNumb2Assignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Operation:
		//	operation='(' operator=OPER '\\s' numb+=NUMBER* '\\s' numb2+=NUMBER* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//operation='(' operator=OPER '\\s' numb+=NUMBER* '\\s' numb2+=NUMBER* ')'
		public Group getGroup() { return cGroup; }
		
		//operation='('
		public Assignment getOperationAssignment_0() { return cOperationAssignment_0; }
		
		//'('
		public Keyword getOperationLeftParenthesisKeyword_0_0() { return cOperationLeftParenthesisKeyword_0_0; }
		
		//operator=OPER
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//OPER
		public RuleCall getOperatorOPERTerminalRuleCall_1_0() { return cOperatorOPERTerminalRuleCall_1_0; }
		
		//'\\s'
		public Keyword getSKeyword_2() { return cSKeyword_2; }
		
		//numb+=NUMBER*
		public Assignment getNumbAssignment_3() { return cNumbAssignment_3; }
		
		//NUMBER
		public RuleCall getNumbNUMBERTerminalRuleCall_3_0() { return cNumbNUMBERTerminalRuleCall_3_0; }
		
		//'\\s'
		public Keyword getSKeyword_4() { return cSKeyword_4; }
		
		//numb2+=NUMBER*
		public Assignment getNumb2Assignment_5() { return cNumb2Assignment_5; }
		
		//NUMBER
		public RuleCall getNumb2NUMBERTerminalRuleCall_5_0() { return cNumb2NUMBERTerminalRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class IDschemeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.IDscheme");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInitAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInitInitialParserRuleCall_0_0 = (RuleCall)cInitAssignment_0.eContents().get(0);
		private final Assignment cSubsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubsSubsequentParserRuleCall_1_0 = (RuleCall)cSubsAssignment_1.eContents().get(0);
		
		//IDscheme:
		//	init=Initial subs+=Subsequent*;
		@Override public ParserRule getRule() { return rule; }
		
		////('^')?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
		//init=Initial subs+=Subsequent*
		public Group getGroup() { return cGroup; }
		
		////('^')?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
		//init=Initial
		public Assignment getInitAssignment_0() { return cInitAssignment_0; }
		
		//Initial
		public RuleCall getInitInitialParserRuleCall_0_0() { return cInitInitialParserRuleCall_0_0; }
		
		//subs+=Subsequent*
		public Assignment getSubsAssignment_1() { return cSubsAssignment_1; }
		
		//Subsequent
		public RuleCall getSubsSubsequentParserRuleCall_1_0() { return cSubsSubsequentParserRuleCall_1_0; }
	}
	public class InitialElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Initial");
		private final Assignment cInitAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cInitAlternatives_0 = (Alternatives)cInitAssignment.eContents().get(0);
		private final RuleCall cInitLETTERTerminalRuleCall_0_0 = (RuleCall)cInitAlternatives_0.eContents().get(0);
		private final Keyword cInitExclamationMarkKeyword_0_1 = (Keyword)cInitAlternatives_0.eContents().get(1);
		private final Keyword cInitDollarSignKeyword_0_2 = (Keyword)cInitAlternatives_0.eContents().get(2);
		private final Keyword cInitPercentSignKeyword_0_3 = (Keyword)cInitAlternatives_0.eContents().get(3);
		private final Keyword cInitAmpersandKeyword_0_4 = (Keyword)cInitAlternatives_0.eContents().get(4);
		private final Keyword cInitAsteriskKeyword_0_5 = (Keyword)cInitAlternatives_0.eContents().get(5);
		private final Keyword cInitSolidusKeyword_0_6 = (Keyword)cInitAlternatives_0.eContents().get(6);
		private final Keyword cInitColonKeyword_0_7 = (Keyword)cInitAlternatives_0.eContents().get(7);
		private final Keyword cInitLessThanSignKeyword_0_8 = (Keyword)cInitAlternatives_0.eContents().get(8);
		private final Keyword cInitEqualsSignKeyword_0_9 = (Keyword)cInitAlternatives_0.eContents().get(9);
		private final Keyword cInitGreaterThanSignKeyword_0_10 = (Keyword)cInitAlternatives_0.eContents().get(10);
		private final Keyword cInitQuestionMarkKeyword_0_11 = (Keyword)cInitAlternatives_0.eContents().get(11);
		private final Keyword cInitTildeKeyword_0_12 = (Keyword)cInitAlternatives_0.eContents().get(12);
		private final Keyword cInit_Keyword_0_13 = (Keyword)cInitAlternatives_0.eContents().get(13);
		private final Keyword cInitCircumflexAccentKeyword_0_14 = (Keyword)cInitAlternatives_0.eContents().get(14);
		
		//Initial:
		//	init=(LETTER | '!' | '$' | '%' | '&' | '*' | '/' | ':' | '<' | '=' | '>' | '?' | '~' | '_' | '^');
		@Override public ParserRule getRule() { return rule; }
		
		//init=(LETTER | '!' | '$' | '%' | '&' | '*' | '/' | ':' | '<' | '=' | '>' | '?' | '~' | '_' | '^')
		public Assignment getInitAssignment() { return cInitAssignment; }
		
		//(LETTER | '!' | '$' | '%' | '&' | '*' | '/' | ':' | '<' | '=' | '>' | '?' | '~' | '_' | '^')
		public Alternatives getInitAlternatives_0() { return cInitAlternatives_0; }
		
		//LETTER
		public RuleCall getInitLETTERTerminalRuleCall_0_0() { return cInitLETTERTerminalRuleCall_0_0; }
		
		//'!'
		public Keyword getInitExclamationMarkKeyword_0_1() { return cInitExclamationMarkKeyword_0_1; }
		
		//'$'
		public Keyword getInitDollarSignKeyword_0_2() { return cInitDollarSignKeyword_0_2; }
		
		//'%'
		public Keyword getInitPercentSignKeyword_0_3() { return cInitPercentSignKeyword_0_3; }
		
		//'&'
		public Keyword getInitAmpersandKeyword_0_4() { return cInitAmpersandKeyword_0_4; }
		
		//'*'
		public Keyword getInitAsteriskKeyword_0_5() { return cInitAsteriskKeyword_0_5; }
		
		//'/'
		public Keyword getInitSolidusKeyword_0_6() { return cInitSolidusKeyword_0_6; }
		
		//':'
		public Keyword getInitColonKeyword_0_7() { return cInitColonKeyword_0_7; }
		
		//'<'
		public Keyword getInitLessThanSignKeyword_0_8() { return cInitLessThanSignKeyword_0_8; }
		
		//'='
		public Keyword getInitEqualsSignKeyword_0_9() { return cInitEqualsSignKeyword_0_9; }
		
		//'>'
		public Keyword getInitGreaterThanSignKeyword_0_10() { return cInitGreaterThanSignKeyword_0_10; }
		
		//'?'
		public Keyword getInitQuestionMarkKeyword_0_11() { return cInitQuestionMarkKeyword_0_11; }
		
		//'~'
		public Keyword getInitTildeKeyword_0_12() { return cInitTildeKeyword_0_12; }
		
		//'_'
		public Keyword getInit_Keyword_0_13() { return cInit_Keyword_0_13; }
		
		//'^'
		public Keyword getInitCircumflexAccentKeyword_0_14() { return cInitCircumflexAccentKeyword_0_14; }
	}
	public class SubsequentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Subsequent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSubsequentAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cInitAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cInitInitialParserRuleCall_1_0_0 = (RuleCall)cInitAssignment_1_0.eContents().get(0);
		private final RuleCall cDIGITTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cPlusSignKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		private final Keyword cHyphenMinusKeyword_1_4 = (Keyword)cAlternatives_1.eContents().get(4);
		
		//Subsequent:
		//	{Subsequent} (init=Initial | DIGIT | '.' | '+' | '-');
		@Override public ParserRule getRule() { return rule; }
		
		//{Subsequent} (init=Initial | DIGIT | '.' | '+' | '-')
		public Group getGroup() { return cGroup; }
		
		//{Subsequent}
		public Action getSubsequentAction_0() { return cSubsequentAction_0; }
		
		//init=Initial | DIGIT | '.' | '+' | '-'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//init=Initial
		public Assignment getInitAssignment_1_0() { return cInitAssignment_1_0; }
		
		//Initial
		public RuleCall getInitInitialParserRuleCall_1_0_0() { return cInitInitialParserRuleCall_1_0_0; }
		
		//DIGIT
		public RuleCall getDIGITTerminalRuleCall_1_1() { return cDIGITTerminalRuleCall_1_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_2() { return cFullStopKeyword_1_2; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_3() { return cPlusSignKeyword_1_3; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_4() { return cHyphenMinusKeyword_1_4; }
	}
	
	
	private final ProgramElements pProgram;
	private final FormElements pForm;
	private final DefinitionElements pDefinition;
	private final VariableDefinitionElements pVariableDefinition;
	private final BodyElements pBody;
	private final ExpressionElements pExpression;
	private final ComparisonElements pComparison;
	private final MultipleConditionElements pMultipleCondition;
	private final ApplicationElements pApplication;
	private final SetElements pSet;
	private final ConditionalElements pConditional;
	private final ConstantElements pConstant;
	private final OperationElements pOperation;
	private final IDschemeElements pIDscheme;
	private final InitialElements pInitial;
	private final SubsequentElements pSubsequent;
	private final TerminalRule tLETTER;
	private final TerminalRule tDIGIT;
	private final TerminalRule tOPER;
	private final TerminalRule tBOOL;
	private final TerminalRule tDOUBLE;
	private final TerminalRule tNUMBER;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pForm = new FormElements();
		this.pDefinition = new DefinitionElements();
		this.pVariableDefinition = new VariableDefinitionElements();
		this.pBody = new BodyElements();
		this.pExpression = new ExpressionElements();
		this.pComparison = new ComparisonElements();
		this.pMultipleCondition = new MultipleConditionElements();
		this.pApplication = new ApplicationElements();
		this.pSet = new SetElements();
		this.pConditional = new ConditionalElements();
		this.pConstant = new ConstantElements();
		this.pOperation = new OperationElements();
		this.pIDscheme = new IDschemeElements();
		this.pInitial = new InitialElements();
		this.pSubsequent = new SubsequentElements();
		this.tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LETTER");
		this.tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DIGIT");
		this.tOPER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OPER");
		this.tBOOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BOOL");
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DOUBLE");
		this.tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.NUMBER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	program+=Form*;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Form:
	//	definition+=Definition | expression+=Expression;
	public FormElements getFormAccess() {
		return pForm;
	}
	
	public ParserRule getFormRule() {
		return getFormAccess().getRule();
	}
	
	//Definition:
	//	variableDefinition=VariableDefinition;
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}
	
	//VariableDefinition:
	//	'(' 'define' variable=ID expression=Expression ')' |
	//	'(' 'define' '(' variable=ID variables+=ID* ')' body=Body ')' |
	//	'(' 'define' '(' variable=ID variables+=ID* '.' var=ID ')' body=Body ')';
	public VariableDefinitionElements getVariableDefinitionAccess() {
		return pVariableDefinition;
	}
	
	public ParserRule getVariableDefinitionRule() {
		return getVariableDefinitionAccess().getRule();
	}
	
	//Body:
	//	definition+=Definition* expression+=Expression+;
	public BodyElements getBodyAccess() {
		return pBody;
	}
	
	public ParserRule getBodyRule() {
		return getBodyAccess().getRule();
	}
	
	//Expression:
	//	constant=Constant
	//	| oper=Operation
	//	| cond=Conditional
	//	| set=Set
	//	| app=Application
	//	| mult=MultipleCondition;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Comparison:
	//	{Comparison} ('(' ('<' | '>' | '=' | '>=' | '<=') num1=NUMBER num2=NUMBER ')' | BOOL);
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//MultipleCondition:
	//	'(' 'cond' ('(' comp+=Comparison exp+=Expression ')') ('(' 'else' expression=Expression ')')?;
	public MultipleConditionElements getMultipleConditionAccess() {
		return pMultipleCondition;
	}
	
	public ParserRule getMultipleConditionRule() {
		return getMultipleConditionAccess().getRule();
	}
	
	//Application:
	//	'(' expression=Expression expressions+=Expression* ')';
	public ApplicationElements getApplicationAccess() {
		return pApplication;
	}
	
	public ParserRule getApplicationRule() {
		return getApplicationAccess().getRule();
	}
	
	//Set:
	//	'(' 'set!' cons=Constant expression=Expression ')';
	public SetElements getSetAccess() {
		return pSet;
	}
	
	public ParserRule getSetRule() {
		return getSetAccess().getRule();
	}
	
	//Conditional:
	//	'(' 'if' condition=Comparison iftrue=Expression else=Expression? ')';
	public ConditionalElements getConditionalAccess() {
		return pConditional;
	}
	
	public ParserRule getConditionalRule() {
		return getConditionalAccess().getRule();
	}
	
	//Constant:
	//	BOOL | INT | DOUBLE | STRING | ID | LETTER;
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}
	
	//Operation:
	//	operation='(' operator=OPER '\\s' numb+=NUMBER* '\\s' numb2+=NUMBER* ')';
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//IDscheme:
	//	init=Initial subs+=Subsequent*;
	public IDschemeElements getIDschemeAccess() {
		return pIDscheme;
	}
	
	public ParserRule getIDschemeRule() {
		return getIDschemeAccess().getRule();
	}
	
	//Initial:
	//	init=(LETTER | '!' | '$' | '%' | '&' | '*' | '/' | ':' | '<' | '=' | '>' | '?' | '~' | '_' | '^');
	public InitialElements getInitialAccess() {
		return pInitial;
	}
	
	public ParserRule getInitialRule() {
		return getInitialAccess().getRule();
	}
	
	//Subsequent:
	//	{Subsequent} (init=Initial | DIGIT | '.' | '+' | '-');
	public SubsequentElements getSubsequentAccess() {
		return pSubsequent;
	}
	
	public ParserRule getSubsequentRule() {
		return getSubsequentAccess().getRule();
	}
	
	//terminal LETTER:
	//	'a'..'z' | 'A'..'Z';
	public TerminalRule getLETTERRule() {
		return tLETTER;
	}
	
	//terminal DIGIT:
	//	'0'..'9'*;
	public TerminalRule getDIGITRule() {
		return tDIGIT;
	}
	
	//terminal OPER:
	//	'+' | '-' | '*' | '/' | 'expt';
	public TerminalRule getOPERRule() {
		return tOPER;
	}
	
	//terminal BOOL:
	//	'#t' | '#f';
	public TerminalRule getBOOLRule() {
		return tBOOL;
	}
	
	//terminal DOUBLE:
	//	INT '.' INT;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//terminal NUMBER:
	//	DIGIT | DOUBLE;
	public TerminalRule getNUMBERRule() {
		return tNUMBER;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
