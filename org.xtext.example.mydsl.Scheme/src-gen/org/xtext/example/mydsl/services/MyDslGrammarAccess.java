/*
 * generated by Xtext 2.16.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Program");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cProgramAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cProgramExpressionParserRuleCall_0_0 = (RuleCall)cProgramAssignment_0.eContents().get(0);
		private final Assignment cProgramAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cProgramDefinitionParserRuleCall_1_0 = (RuleCall)cProgramAssignment_1.eContents().get(0);
		
		///*
		// * Pontifícia Universidade Católica do Rio Grande do Sul
		// * Linguagens de Programação 2019/1
		// * Gregory Lagranha
		// * João Alberto do Nascimento
		// * 
		// * Fontes: 
		// * 		https://web-artanis.com/scheme.html
		// * 		https://www.scheme.com/tspl2d/grammar.html
		// */ Program:
		//	(program+=Expression | program+=Definition)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(program+=Expression | program+=Definition)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//program+=Expression
		public Assignment getProgramAssignment_0() { return cProgramAssignment_0; }
		
		//Expression
		public RuleCall getProgramExpressionParserRuleCall_0_0() { return cProgramExpressionParserRuleCall_0_0; }
		
		//program+=Definition
		public Assignment getProgramAssignment_1() { return cProgramAssignment_1; }
		
		//Definition
		public RuleCall getProgramDefinitionParserRuleCall_1_0() { return cProgramDefinitionParserRuleCall_1_0; }
	}
	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Definition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cDefineKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cConsAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cConsConstantParserRuleCall_0_2_0 = (RuleCall)cConsAssignment_0_2.eContents().get(0);
		private final Assignment cExpressionAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_0_3_0 = (RuleCall)cExpressionAssignment_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cDefineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cVariableAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cVariableIDTerminalRuleCall_1_3_0 = (RuleCall)cVariableAssignment_1_3.eContents().get(0);
		private final Assignment cVariablesAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cVariablesIDTerminalRuleCall_1_4_0 = (RuleCall)cVariablesAssignment_1_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cBodyAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cBodyBodyParserRuleCall_1_6_0 = (RuleCall)cBodyAssignment_1_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		
		//Definition:
		//	'(' 'define' cons=Constant expression=Expression ')'
		//	| '(' 'define' '(' variable=ID variables+=ID* ')' body=Body ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' 'define' cons=Constant expression=Expression ')' | '(' 'define' '(' variable=ID variables+=ID* ')' body=Body ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' 'define' cons=Constant expression=Expression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//'define'
		public Keyword getDefineKeyword_0_1() { return cDefineKeyword_0_1; }
		
		//cons=Constant
		public Assignment getConsAssignment_0_2() { return cConsAssignment_0_2; }
		
		//Constant
		public RuleCall getConsConstantParserRuleCall_0_2_0() { return cConsConstantParserRuleCall_0_2_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_0_3() { return cExpressionAssignment_0_3; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_3_0() { return cExpressionExpressionParserRuleCall_0_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }
		
		//'(' 'define' '(' variable=ID variables+=ID* ')' body=Body ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//'define'
		public Keyword getDefineKeyword_1_1() { return cDefineKeyword_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }
		
		//variable=ID
		public Assignment getVariableAssignment_1_3() { return cVariableAssignment_1_3; }
		
		//ID
		public RuleCall getVariableIDTerminalRuleCall_1_3_0() { return cVariableIDTerminalRuleCall_1_3_0; }
		
		//variables+=ID*
		public Assignment getVariablesAssignment_1_4() { return cVariablesAssignment_1_4; }
		
		//ID
		public RuleCall getVariablesIDTerminalRuleCall_1_4_0() { return cVariablesIDTerminalRuleCall_1_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }
		
		//body=Body
		public Assignment getBodyAssignment_1_6() { return cBodyAssignment_1_6; }
		
		//Body
		public RuleCall getBodyBodyParserRuleCall_1_6_0() { return cBodyBodyParserRuleCall_1_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_7() { return cRightParenthesisKeyword_1_7; }
	}
	public class BodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Body");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDefinitionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDefinitionDefinitionParserRuleCall_0_0 = (RuleCall)cDefinitionAssignment_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//Body:
		//	definition+=Definition* expression+=Expression+;
		@Override public ParserRule getRule() { return rule; }
		
		//definition+=Definition* expression+=Expression+
		public Group getGroup() { return cGroup; }
		
		//definition+=Definition*
		public Assignment getDefinitionAssignment_0() { return cDefinitionAssignment_0; }
		
		//Definition
		public RuleCall getDefinitionDefinitionParserRuleCall_0_0() { return cDefinitionDefinitionParserRuleCall_0_0; }
		
		//expression+=Expression+
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cConstantAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cConstantConstantParserRuleCall_0_0 = (RuleCall)cConstantAssignment_0.eContents().get(0);
		private final Assignment cOperAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOperOperationParserRuleCall_1_0 = (RuleCall)cOperAssignment_1.eContents().get(0);
		private final Assignment cCompAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cCompComparisonParserRuleCall_2_0 = (RuleCall)cCompAssignment_2.eContents().get(0);
		private final Assignment cCondAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cCondConditionalParserRuleCall_3_0 = (RuleCall)cCondAssignment_3.eContents().get(0);
		private final Assignment cSetAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cSetSetParserRuleCall_4_0 = (RuleCall)cSetAssignment_4.eContents().get(0);
		private final Assignment cTrigAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cTrigTrigonometryParserRuleCall_5_0 = (RuleCall)cTrigAssignment_5.eContents().get(0);
		private final Assignment cListAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cListListNumbersParserRuleCall_6_0 = (RuleCall)cListAssignment_6.eContents().get(0);
		private final Assignment cListLengthAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cListLengthListLengthParserRuleCall_7_0 = (RuleCall)cListLengthAssignment_7.eContents().get(0);
		private final Assignment cNestedOperationAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final RuleCall cNestedOperationNestedOperationParserRuleCall_8_0 = (RuleCall)cNestedOperationAssignment_8.eContents().get(0);
		private final Assignment cCalculateAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final RuleCall cCalculateCalculateParserRuleCall_9_0 = (RuleCall)cCalculateAssignment_9.eContents().get(0);
		
		//Expression:
		//	constant=Constant
		//	| oper=Operation
		//	| comp=Comparison
		//	| cond=Conditional
		//	| set=Set
		//	| trig=Trigonometry
		//	| list=ListNumbers
		//	| listLength=ListLength
		//	| nestedOperation=NestedOperation
		//	| calculate=Calculate;
		@Override public ParserRule getRule() { return rule; }
		
		//constant=Constant | oper=Operation | comp=Comparison | cond=Conditional | set=Set | trig=Trigonometry | list=ListNumbers
		//| listLength=ListLength | nestedOperation=NestedOperation | calculate=Calculate
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//constant=Constant
		public Assignment getConstantAssignment_0() { return cConstantAssignment_0; }
		
		//Constant
		public RuleCall getConstantConstantParserRuleCall_0_0() { return cConstantConstantParserRuleCall_0_0; }
		
		//oper=Operation
		public Assignment getOperAssignment_1() { return cOperAssignment_1; }
		
		//Operation
		public RuleCall getOperOperationParserRuleCall_1_0() { return cOperOperationParserRuleCall_1_0; }
		
		//comp=Comparison
		public Assignment getCompAssignment_2() { return cCompAssignment_2; }
		
		//Comparison
		public RuleCall getCompComparisonParserRuleCall_2_0() { return cCompComparisonParserRuleCall_2_0; }
		
		//cond=Conditional
		public Assignment getCondAssignment_3() { return cCondAssignment_3; }
		
		//Conditional
		public RuleCall getCondConditionalParserRuleCall_3_0() { return cCondConditionalParserRuleCall_3_0; }
		
		//set=Set
		public Assignment getSetAssignment_4() { return cSetAssignment_4; }
		
		//Set
		public RuleCall getSetSetParserRuleCall_4_0() { return cSetSetParserRuleCall_4_0; }
		
		//trig=Trigonometry
		public Assignment getTrigAssignment_5() { return cTrigAssignment_5; }
		
		//Trigonometry
		public RuleCall getTrigTrigonometryParserRuleCall_5_0() { return cTrigTrigonometryParserRuleCall_5_0; }
		
		//list=ListNumbers
		public Assignment getListAssignment_6() { return cListAssignment_6; }
		
		//ListNumbers
		public RuleCall getListListNumbersParserRuleCall_6_0() { return cListListNumbersParserRuleCall_6_0; }
		
		//listLength=ListLength
		public Assignment getListLengthAssignment_7() { return cListLengthAssignment_7; }
		
		//ListLength
		public RuleCall getListLengthListLengthParserRuleCall_7_0() { return cListLengthListLengthParserRuleCall_7_0; }
		
		//nestedOperation=NestedOperation
		public Assignment getNestedOperationAssignment_8() { return cNestedOperationAssignment_8; }
		
		//NestedOperation
		public RuleCall getNestedOperationNestedOperationParserRuleCall_8_0() { return cNestedOperationNestedOperationParserRuleCall_8_0; }
		
		//calculate=Calculate
		public Assignment getCalculateAssignment_9() { return cCalculateAssignment_9; }
		
		//Calculate
		public RuleCall getCalculateCalculateParserRuleCall_9_0() { return cCalculateCalculateParserRuleCall_9_0; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cComparisonAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_1 = (Alternatives)cGroup_1_0.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0_1_0 = (Keyword)cAlternatives_1_0_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_0_1_1 = (Keyword)cAlternatives_1_0_1.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0_1_2 = (Keyword)cAlternatives_1_0_1.eContents().get(2);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_0_1_3 = (Keyword)cAlternatives_1_0_1.eContents().get(3);
		private final Keyword cLessThanSignEqualsSignKeyword_1_0_1_4 = (Keyword)cAlternatives_1_0_1.eContents().get(4);
		private final Assignment cNum1Assignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cNum1NumberParserRuleCall_1_0_2_0 = (RuleCall)cNum1Assignment_1_0_2.eContents().get(0);
		private final Assignment cNum2Assignment_1_0_3 = (Assignment)cGroup_1_0.eContents().get(3);
		private final RuleCall cNum2NumberParserRuleCall_1_0_3_0 = (RuleCall)cNum2Assignment_1_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_4 = (Keyword)cGroup_1_0.eContents().get(4);
		private final RuleCall cBOOLTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//Comparison:
		//	{Comparison} ('(' ('<' | '>' | '=' | '>=' | '<=') num1=Number num2=Number ')' | BOOL);
		@Override public ParserRule getRule() { return rule; }
		
		//{Comparison} ('(' ('<' | '>' | '=' | '>=' | '<=') num1=Number num2=Number ')' | BOOL)
		public Group getGroup() { return cGroup; }
		
		//{Comparison}
		public Action getComparisonAction_0() { return cComparisonAction_0; }
		
		//'(' ('<' | '>' | '=' | '>=' | '<=') num1=Number num2=Number ')' | BOOL
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'(' ('<' | '>' | '=' | '>=' | '<=') num1=Number num2=Number ')'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0_0() { return cLeftParenthesisKeyword_1_0_0; }
		
		//'<' | '>' | '=' | '>=' | '<='
		public Alternatives getAlternatives_1_0_1() { return cAlternatives_1_0_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_0_1_0() { return cLessThanSignKeyword_1_0_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_0_1_1() { return cGreaterThanSignKeyword_1_0_1_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0_1_2() { return cEqualsSignKeyword_1_0_1_2; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_1_0_1_3() { return cGreaterThanSignEqualsSignKeyword_1_0_1_3; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_1_0_1_4() { return cLessThanSignEqualsSignKeyword_1_0_1_4; }
		
		//num1=Number
		public Assignment getNum1Assignment_1_0_2() { return cNum1Assignment_1_0_2; }
		
		//Number
		public RuleCall getNum1NumberParserRuleCall_1_0_2_0() { return cNum1NumberParserRuleCall_1_0_2_0; }
		
		//num2=Number
		public Assignment getNum2Assignment_1_0_3() { return cNum2Assignment_1_0_3; }
		
		//Number
		public RuleCall getNum2NumberParserRuleCall_1_0_3_0() { return cNum2NumberParserRuleCall_1_0_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_0_4() { return cRightParenthesisKeyword_1_0_4; }
		
		//BOOL
		public RuleCall getBOOLTerminalRuleCall_1_1() { return cBOOLTerminalRuleCall_1_1; }
	}
	public class TrigonometryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Trigonometry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTrigAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTrigLeftParenthesisKeyword_0_0 = (Keyword)cTrigAssignment_0.eContents().get(0);
		private final RuleCall cMATHTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNumbAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNumbNumberParserRuleCall_2_0 = (RuleCall)cNumbAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Trigonometry:
		//	trig='(' MATH numb+=Number ')';
		@Override public ParserRule getRule() { return rule; }
		
		//trig='(' MATH numb+=Number ')'
		public Group getGroup() { return cGroup; }
		
		//trig='('
		public Assignment getTrigAssignment_0() { return cTrigAssignment_0; }
		
		//'('
		public Keyword getTrigLeftParenthesisKeyword_0_0() { return cTrigLeftParenthesisKeyword_0_0; }
		
		//MATH
		public RuleCall getMATHTerminalRuleCall_1() { return cMATHTerminalRuleCall_1; }
		
		//numb+=Number
		public Assignment getNumbAssignment_2() { return cNumbAssignment_2; }
		
		//Number
		public RuleCall getNumbNumberParserRuleCall_2_0() { return cNumbNumberParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class SetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Set");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConsConstantParserRuleCall_2_0 = (RuleCall)cConsAssignment_2.eContents().get(0);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Set:
		//	'(' 'set!' cons=Constant expression=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' 'set!' cons=Constant expression=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//'set!'
		public Keyword getSetKeyword_1() { return cSetKeyword_1; }
		
		//cons=Constant
		public Assignment getConsAssignment_2() { return cConsAssignment_2; }
		
		//Constant
		public RuleCall getConsConstantParserRuleCall_2_0() { return cConsConstantParserRuleCall_2_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ConditionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Conditional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionComparisonParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Assignment cIftrueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIftrueExpressionParserRuleCall_3_0 = (RuleCall)cIftrueAssignment_3.eContents().get(0);
		private final Assignment cElseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElseExpressionParserRuleCall_4_0 = (RuleCall)cElseAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Conditional:
		//	'(' 'if' condition=Comparison iftrue=Expression else=Expression? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' 'if' condition=Comparison iftrue=Expression else=Expression? ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//condition=Comparison
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//Comparison
		public RuleCall getConditionComparisonParserRuleCall_2_0() { return cConditionComparisonParserRuleCall_2_0; }
		
		//iftrue=Expression
		public Assignment getIftrueAssignment_3() { return cIftrueAssignment_3; }
		
		//Expression
		public RuleCall getIftrueExpressionParserRuleCall_3_0() { return cIftrueExpressionParserRuleCall_3_0; }
		
		//else=Expression?
		public Assignment getElseAssignment_4() { return cElseAssignment_4; }
		
		//Expression
		public RuleCall getElseExpressionParserRuleCall_4_0() { return cElseExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Constant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBOOLTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDIGITTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDOUBLETerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSTRINGTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cIDTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cLETTERTerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cNEGATIVETerminalRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Constant:
		//	BOOL | DIGIT | DOUBLE | STRING | ID | LETTER | NEGATIVE;
		@Override public ParserRule getRule() { return rule; }
		
		//BOOL | DIGIT | DOUBLE | STRING | ID | LETTER | NEGATIVE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BOOL
		public RuleCall getBOOLTerminalRuleCall_0() { return cBOOLTerminalRuleCall_0; }
		
		//DIGIT
		public RuleCall getDIGITTerminalRuleCall_1() { return cDIGITTerminalRuleCall_1; }
		
		//DOUBLE
		public RuleCall getDOUBLETerminalRuleCall_2() { return cDOUBLETerminalRuleCall_2; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_3() { return cSTRINGTerminalRuleCall_3; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_4() { return cIDTerminalRuleCall_4; }
		
		//LETTER
		public RuleCall getLETTERTerminalRuleCall_5() { return cLETTERTerminalRuleCall_5; }
		
		//NEGATIVE
		public RuleCall getNEGATIVETerminalRuleCall_6() { return cNEGATIVETerminalRuleCall_6; }
	}
	public class NestedOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.NestedOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNestedOperationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNestedOperationLeftParenthesisKeyword_0_0 = (Keyword)cNestedOperationAssignment_0.eContents().get(0);
		private final Assignment cCalculateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCalculateCalculateParserRuleCall_1_0 = (RuleCall)cCalculateAssignment_1.eContents().get(0);
		private final Assignment cOperationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperationOperationParserRuleCall_2_0 = (RuleCall)cOperationAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//NestedOperation:
		//	nestedOperation='(' calculate+=Calculate operation+=Operation ')';
		@Override public ParserRule getRule() { return rule; }
		
		//nestedOperation='(' calculate+=Calculate operation+=Operation ')'
		public Group getGroup() { return cGroup; }
		
		//nestedOperation='('
		public Assignment getNestedOperationAssignment_0() { return cNestedOperationAssignment_0; }
		
		//'('
		public Keyword getNestedOperationLeftParenthesisKeyword_0_0() { return cNestedOperationLeftParenthesisKeyword_0_0; }
		
		//calculate+=Calculate
		public Assignment getCalculateAssignment_1() { return cCalculateAssignment_1; }
		
		//Calculate
		public RuleCall getCalculateCalculateParserRuleCall_1_0() { return cCalculateCalculateParserRuleCall_1_0; }
		
		//operation+=Operation
		public Assignment getOperationAssignment_2() { return cOperationAssignment_2; }
		
		//Operation
		public RuleCall getOperationOperationParserRuleCall_2_0() { return cOperationOperationParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Operation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cOperationLeftParenthesisKeyword_0_0 = (Keyword)cOperationAssignment_0.eContents().get(0);
		private final Assignment cCalculateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCalculateCalculateParserRuleCall_1_0 = (RuleCall)cCalculateAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Operation:
		//	operation='(' calculate+=Calculate ')';
		@Override public ParserRule getRule() { return rule; }
		
		//operation='(' calculate+=Calculate ')'
		public Group getGroup() { return cGroup; }
		
		//operation='('
		public Assignment getOperationAssignment_0() { return cOperationAssignment_0; }
		
		//'('
		public Keyword getOperationLeftParenthesisKeyword_0_0() { return cOperationLeftParenthesisKeyword_0_0; }
		
		//calculate+=Calculate
		public Assignment getCalculateAssignment_1() { return cCalculateAssignment_1; }
		
		//Calculate
		public RuleCall getCalculateCalculateParserRuleCall_1_0() { return cCalculateCalculateParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class CalculateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Calculate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCalculateAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCalculateOPERTerminalRuleCall_0_0 = (RuleCall)cCalculateAssignment_0.eContents().get(0);
		private final Assignment cNumbAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNumbNumberParserRuleCall_1_0 = (RuleCall)cNumbAssignment_1.eContents().get(0);
		
		//Calculate:
		//	calculate=OPER numb+=Number*;
		@Override public ParserRule getRule() { return rule; }
		
		//calculate=OPER numb+=Number*
		public Group getGroup() { return cGroup; }
		
		//calculate=OPER
		public Assignment getCalculateAssignment_0() { return cCalculateAssignment_0; }
		
		//OPER
		public RuleCall getCalculateOPERTerminalRuleCall_0_0() { return cCalculateOPERTerminalRuleCall_0_0; }
		
		//numb+=Number*
		public Assignment getNumbAssignment_1() { return cNumbAssignment_1; }
		
		//Number
		public RuleCall getNumbNumberParserRuleCall_1_0() { return cNumbNumberParserRuleCall_1_0; }
	}
	public class ListNumbersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ListNumbers");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListNumbersAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cListKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNumberAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNumberNumberParserRuleCall_3_0 = (RuleCall)cNumberAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ListNumbers:
		//	{ListNumbers} '(' 'list' number+=Number* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{ListNumbers} '(' 'list' number+=Number* ')'
		public Group getGroup() { return cGroup; }
		
		//{ListNumbers}
		public Action getListNumbersAction_0() { return cListNumbersAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'list'
		public Keyword getListKeyword_2() { return cListKeyword_2; }
		
		//number+=Number*
		public Assignment getNumberAssignment_3() { return cNumberAssignment_3; }
		
		//Number
		public RuleCall getNumberNumberParserRuleCall_3_0() { return cNumberNumberParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ListLengthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ListLength");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListLengthAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLengthKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cListNumbersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cListNumbersListNumbersParserRuleCall_3_0 = (RuleCall)cListNumbersAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ListLength:
		//	{ListLength} '(' 'length' listNumbers+=ListNumbers ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{ListLength} '(' 'length' listNumbers+=ListNumbers ')'
		public Group getGroup() { return cGroup; }
		
		//{ListLength}
		public Action getListLengthAction_0() { return cListLengthAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'length'
		public Keyword getLengthKeyword_2() { return cLengthKeyword_2; }
		
		//listNumbers+=ListNumbers
		public Assignment getListNumbersAssignment_3() { return cListNumbersAssignment_3; }
		
		//ListNumbers
		public RuleCall getListNumbersListNumbersParserRuleCall_3_0() { return cListNumbersListNumbersParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Number");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDIGITTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDOUBLETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Number:
		//	DIGIT | DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//DIGIT | DOUBLE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DIGIT
		public RuleCall getDIGITTerminalRuleCall_0() { return cDIGITTerminalRuleCall_0; }
		
		//DOUBLE
		public RuleCall getDOUBLETerminalRuleCall_1() { return cDOUBLETerminalRuleCall_1; }
	}
	
	
	private final ProgramElements pProgram;
	private final DefinitionElements pDefinition;
	private final BodyElements pBody;
	private final ExpressionElements pExpression;
	private final ComparisonElements pComparison;
	private final TrigonometryElements pTrigonometry;
	private final SetElements pSet;
	private final ConditionalElements pConditional;
	private final ConstantElements pConstant;
	private final NestedOperationElements pNestedOperation;
	private final OperationElements pOperation;
	private final CalculateElements pCalculate;
	private final ListNumbersElements pListNumbers;
	private final ListLengthElements pListLength;
	private final NumberElements pNumber;
	private final TerminalRule tMATH;
	private final TerminalRule tLETTER;
	private final TerminalRule tOPER;
	private final TerminalRule tBOOL;
	private final TerminalRule tNEGATIVE;
	private final TerminalRule tDOUBLE;
	private final TerminalRule tDIGIT;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pDefinition = new DefinitionElements();
		this.pBody = new BodyElements();
		this.pExpression = new ExpressionElements();
		this.pComparison = new ComparisonElements();
		this.pTrigonometry = new TrigonometryElements();
		this.pSet = new SetElements();
		this.pConditional = new ConditionalElements();
		this.pConstant = new ConstantElements();
		this.pNestedOperation = new NestedOperationElements();
		this.pOperation = new OperationElements();
		this.pCalculate = new CalculateElements();
		this.pListNumbers = new ListNumbersElements();
		this.pListLength = new ListLengthElements();
		this.pNumber = new NumberElements();
		this.tMATH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MATH");
		this.tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LETTER");
		this.tOPER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OPER");
		this.tBOOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BOOL");
		this.tNEGATIVE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.NEGATIVE");
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DOUBLE");
		this.tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DIGIT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	///*
	// * Pontifícia Universidade Católica do Rio Grande do Sul
	// * Linguagens de Programação 2019/1
	// * Gregory Lagranha
	// * João Alberto do Nascimento
	// * 
	// * Fontes: 
	// * 		https://web-artanis.com/scheme.html
	// * 		https://www.scheme.com/tspl2d/grammar.html
	// */ Program:
	//	(program+=Expression | program+=Definition)*;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Definition:
	//	'(' 'define' cons=Constant expression=Expression ')'
	//	| '(' 'define' '(' variable=ID variables+=ID* ')' body=Body ')';
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}
	
	//Body:
	//	definition+=Definition* expression+=Expression+;
	public BodyElements getBodyAccess() {
		return pBody;
	}
	
	public ParserRule getBodyRule() {
		return getBodyAccess().getRule();
	}
	
	//Expression:
	//	constant=Constant
	//	| oper=Operation
	//	| comp=Comparison
	//	| cond=Conditional
	//	| set=Set
	//	| trig=Trigonometry
	//	| list=ListNumbers
	//	| listLength=ListLength
	//	| nestedOperation=NestedOperation
	//	| calculate=Calculate;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Comparison:
	//	{Comparison} ('(' ('<' | '>' | '=' | '>=' | '<=') num1=Number num2=Number ')' | BOOL);
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//Trigonometry:
	//	trig='(' MATH numb+=Number ')';
	public TrigonometryElements getTrigonometryAccess() {
		return pTrigonometry;
	}
	
	public ParserRule getTrigonometryRule() {
		return getTrigonometryAccess().getRule();
	}
	
	//Set:
	//	'(' 'set!' cons=Constant expression=Expression ')';
	public SetElements getSetAccess() {
		return pSet;
	}
	
	public ParserRule getSetRule() {
		return getSetAccess().getRule();
	}
	
	//Conditional:
	//	'(' 'if' condition=Comparison iftrue=Expression else=Expression? ')';
	public ConditionalElements getConditionalAccess() {
		return pConditional;
	}
	
	public ParserRule getConditionalRule() {
		return getConditionalAccess().getRule();
	}
	
	//Constant:
	//	BOOL | DIGIT | DOUBLE | STRING | ID | LETTER | NEGATIVE;
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}
	
	//NestedOperation:
	//	nestedOperation='(' calculate+=Calculate operation+=Operation ')';
	public NestedOperationElements getNestedOperationAccess() {
		return pNestedOperation;
	}
	
	public ParserRule getNestedOperationRule() {
		return getNestedOperationAccess().getRule();
	}
	
	//Operation:
	//	operation='(' calculate+=Calculate ')';
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//Calculate:
	//	calculate=OPER numb+=Number*;
	public CalculateElements getCalculateAccess() {
		return pCalculate;
	}
	
	public ParserRule getCalculateRule() {
		return getCalculateAccess().getRule();
	}
	
	//ListNumbers:
	//	{ListNumbers} '(' 'list' number+=Number* ')';
	public ListNumbersElements getListNumbersAccess() {
		return pListNumbers;
	}
	
	public ParserRule getListNumbersRule() {
		return getListNumbersAccess().getRule();
	}
	
	//ListLength:
	//	{ListLength} '(' 'length' listNumbers+=ListNumbers ')';
	public ListLengthElements getListLengthAccess() {
		return pListLength;
	}
	
	public ParserRule getListLengthRule() {
		return getListLengthAccess().getRule();
	}
	
	//Number:
	//	DIGIT | DOUBLE;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	//terminal MATH:
	//	'cos' | 'abs' | 'square';
	public TerminalRule getMATHRule() {
		return tMATH;
	}
	
	//terminal LETTER:
	//	'a'..'z' | 'A'..'Z';
	public TerminalRule getLETTERRule() {
		return tLETTER;
	}
	
	//terminal OPER:
	//	'+' | '-' | '*' | '/' | 'expt' | 'quotient' | 'remainder';
	public TerminalRule getOPERRule() {
		return tOPER;
	}
	
	//terminal BOOL:
	//	'#t' | '#f';
	public TerminalRule getBOOLRule() {
		return tBOOL;
	}
	
	//terminal NEGATIVE:
	//	'-' DIGIT;
	public TerminalRule getNEGATIVERule() {
		return tNEGATIVE;
	}
	
	//terminal DOUBLE:
	//	DIGIT '.' DIGIT;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//terminal DIGIT:
	//	'0'..'9'*;
	public TerminalRule getDIGITRule() {
		return tDIGIT;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
