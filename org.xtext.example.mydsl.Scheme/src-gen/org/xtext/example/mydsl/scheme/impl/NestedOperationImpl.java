/**
 * generated by Xtext 2.16.0
 */
package org.xtext.example.mydsl.scheme.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.scheme.Calculate;
import org.xtext.example.mydsl.scheme.NestedOperation;
import org.xtext.example.mydsl.scheme.Operation;
import org.xtext.example.mydsl.scheme.SchemePackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Nested Operation</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.scheme.impl.NestedOperationImpl#getNestedOperation <em>Nested Operation</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.scheme.impl.NestedOperationImpl#getCalculate <em>Calculate</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.scheme.impl.NestedOperationImpl#getOperation <em>Operation</em>}</li>
 * </ul>
 *
 * @generated
 */
public class NestedOperationImpl extends MinimalEObjectImpl.Container implements NestedOperation
{
  /**
   * The default value of the '{@link #getNestedOperation() <em>Nested Operation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNestedOperation()
   * @generated
   * @ordered
   */
  protected static final String NESTED_OPERATION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getNestedOperation() <em>Nested Operation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNestedOperation()
   * @generated
   * @ordered
   */
  protected String nestedOperation = NESTED_OPERATION_EDEFAULT;

  /**
   * The cached value of the '{@link #getCalculate() <em>Calculate</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCalculate()
   * @generated
   * @ordered
   */
  protected EList<Calculate> calculate;

  /**
   * The cached value of the '{@link #getOperation() <em>Operation</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperation()
   * @generated
   * @ordered
   */
  protected EList<Operation> operation;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NestedOperationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SchemePackage.Literals.NESTED_OPERATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getNestedOperation()
  {
    return nestedOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNestedOperation(String newNestedOperation)
  {
    String oldNestedOperation = nestedOperation;
    nestedOperation = newNestedOperation;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SchemePackage.NESTED_OPERATION__NESTED_OPERATION, oldNestedOperation, nestedOperation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Calculate> getCalculate()
  {
    if (calculate == null)
    {
      calculate = new EObjectContainmentEList<Calculate>(Calculate.class, this, SchemePackage.NESTED_OPERATION__CALCULATE);
    }
    return calculate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Operation> getOperation()
  {
    if (operation == null)
    {
      operation = new EObjectContainmentEList<Operation>(Operation.class, this, SchemePackage.NESTED_OPERATION__OPERATION);
    }
    return operation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SchemePackage.NESTED_OPERATION__CALCULATE:
        return ((InternalEList<?>)getCalculate()).basicRemove(otherEnd, msgs);
      case SchemePackage.NESTED_OPERATION__OPERATION:
        return ((InternalEList<?>)getOperation()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SchemePackage.NESTED_OPERATION__NESTED_OPERATION:
        return getNestedOperation();
      case SchemePackage.NESTED_OPERATION__CALCULATE:
        return getCalculate();
      case SchemePackage.NESTED_OPERATION__OPERATION:
        return getOperation();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SchemePackage.NESTED_OPERATION__NESTED_OPERATION:
        setNestedOperation((String)newValue);
        return;
      case SchemePackage.NESTED_OPERATION__CALCULATE:
        getCalculate().clear();
        getCalculate().addAll((Collection<? extends Calculate>)newValue);
        return;
      case SchemePackage.NESTED_OPERATION__OPERATION:
        getOperation().clear();
        getOperation().addAll((Collection<? extends Operation>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SchemePackage.NESTED_OPERATION__NESTED_OPERATION:
        setNestedOperation(NESTED_OPERATION_EDEFAULT);
        return;
      case SchemePackage.NESTED_OPERATION__CALCULATE:
        getCalculate().clear();
        return;
      case SchemePackage.NESTED_OPERATION__OPERATION:
        getOperation().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SchemePackage.NESTED_OPERATION__NESTED_OPERATION:
        return NESTED_OPERATION_EDEFAULT == null ? nestedOperation != null : !NESTED_OPERATION_EDEFAULT.equals(nestedOperation);
      case SchemePackage.NESTED_OPERATION__CALCULATE:
        return calculate != null && !calculate.isEmpty();
      case SchemePackage.NESTED_OPERATION__OPERATION:
        return operation != null && !operation.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (nestedOperation: ");
    result.append(nestedOperation);
    result.append(')');
    return result.toString();
  }

} //NestedOperationImpl
