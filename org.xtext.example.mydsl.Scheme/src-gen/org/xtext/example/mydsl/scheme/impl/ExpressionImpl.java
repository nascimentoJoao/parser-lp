/**
 * generated by Xtext 2.16.0
 */
package org.xtext.example.mydsl.scheme.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.scheme.Application;
import org.xtext.example.mydsl.scheme.Conditional;
import org.xtext.example.mydsl.scheme.Expression;
import org.xtext.example.mydsl.scheme.MultipleCondition;
import org.xtext.example.mydsl.scheme.Operation;
import org.xtext.example.mydsl.scheme.SchemePackage;
import org.xtext.example.mydsl.scheme.Set;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.scheme.impl.ExpressionImpl#getConstant <em>Constant</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.scheme.impl.ExpressionImpl#getOper <em>Oper</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.scheme.impl.ExpressionImpl#getCond <em>Cond</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.scheme.impl.ExpressionImpl#getSet <em>Set</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.scheme.impl.ExpressionImpl#getApp <em>App</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.scheme.impl.ExpressionImpl#getMult <em>Mult</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExpressionImpl extends MinimalEObjectImpl.Container implements Expression
{
  /**
   * The default value of the '{@link #getConstant() <em>Constant</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstant()
   * @generated
   * @ordered
   */
  protected static final String CONSTANT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getConstant() <em>Constant</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstant()
   * @generated
   * @ordered
   */
  protected String constant = CONSTANT_EDEFAULT;

  /**
   * The cached value of the '{@link #getOper() <em>Oper</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOper()
   * @generated
   * @ordered
   */
  protected Operation oper;

  /**
   * The cached value of the '{@link #getCond() <em>Cond</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCond()
   * @generated
   * @ordered
   */
  protected Conditional cond;

  /**
   * The cached value of the '{@link #getSet() <em>Set</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSet()
   * @generated
   * @ordered
   */
  protected Set set;

  /**
   * The cached value of the '{@link #getApp() <em>App</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getApp()
   * @generated
   * @ordered
   */
  protected Application app;

  /**
   * The cached value of the '{@link #getMult() <em>Mult</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMult()
   * @generated
   * @ordered
   */
  protected MultipleCondition mult;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SchemePackage.Literals.EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getConstant()
  {
    return constant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConstant(String newConstant)
  {
    String oldConstant = constant;
    constant = newConstant;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SchemePackage.EXPRESSION__CONSTANT, oldConstant, constant));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Operation getOper()
  {
    return oper;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOper(Operation newOper, NotificationChain msgs)
  {
    Operation oldOper = oper;
    oper = newOper;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SchemePackage.EXPRESSION__OPER, oldOper, newOper);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOper(Operation newOper)
  {
    if (newOper != oper)
    {
      NotificationChain msgs = null;
      if (oper != null)
        msgs = ((InternalEObject)oper).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SchemePackage.EXPRESSION__OPER, null, msgs);
      if (newOper != null)
        msgs = ((InternalEObject)newOper).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SchemePackage.EXPRESSION__OPER, null, msgs);
      msgs = basicSetOper(newOper, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SchemePackage.EXPRESSION__OPER, newOper, newOper));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Conditional getCond()
  {
    return cond;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCond(Conditional newCond, NotificationChain msgs)
  {
    Conditional oldCond = cond;
    cond = newCond;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SchemePackage.EXPRESSION__COND, oldCond, newCond);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCond(Conditional newCond)
  {
    if (newCond != cond)
    {
      NotificationChain msgs = null;
      if (cond != null)
        msgs = ((InternalEObject)cond).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SchemePackage.EXPRESSION__COND, null, msgs);
      if (newCond != null)
        msgs = ((InternalEObject)newCond).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SchemePackage.EXPRESSION__COND, null, msgs);
      msgs = basicSetCond(newCond, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SchemePackage.EXPRESSION__COND, newCond, newCond));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Set getSet()
  {
    return set;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSet(Set newSet, NotificationChain msgs)
  {
    Set oldSet = set;
    set = newSet;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SchemePackage.EXPRESSION__SET, oldSet, newSet);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSet(Set newSet)
  {
    if (newSet != set)
    {
      NotificationChain msgs = null;
      if (set != null)
        msgs = ((InternalEObject)set).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SchemePackage.EXPRESSION__SET, null, msgs);
      if (newSet != null)
        msgs = ((InternalEObject)newSet).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SchemePackage.EXPRESSION__SET, null, msgs);
      msgs = basicSetSet(newSet, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SchemePackage.EXPRESSION__SET, newSet, newSet));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Application getApp()
  {
    return app;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetApp(Application newApp, NotificationChain msgs)
  {
    Application oldApp = app;
    app = newApp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SchemePackage.EXPRESSION__APP, oldApp, newApp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setApp(Application newApp)
  {
    if (newApp != app)
    {
      NotificationChain msgs = null;
      if (app != null)
        msgs = ((InternalEObject)app).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SchemePackage.EXPRESSION__APP, null, msgs);
      if (newApp != null)
        msgs = ((InternalEObject)newApp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SchemePackage.EXPRESSION__APP, null, msgs);
      msgs = basicSetApp(newApp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SchemePackage.EXPRESSION__APP, newApp, newApp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MultipleCondition getMult()
  {
    return mult;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMult(MultipleCondition newMult, NotificationChain msgs)
  {
    MultipleCondition oldMult = mult;
    mult = newMult;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SchemePackage.EXPRESSION__MULT, oldMult, newMult);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMult(MultipleCondition newMult)
  {
    if (newMult != mult)
    {
      NotificationChain msgs = null;
      if (mult != null)
        msgs = ((InternalEObject)mult).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SchemePackage.EXPRESSION__MULT, null, msgs);
      if (newMult != null)
        msgs = ((InternalEObject)newMult).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SchemePackage.EXPRESSION__MULT, null, msgs);
      msgs = basicSetMult(newMult, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SchemePackage.EXPRESSION__MULT, newMult, newMult));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SchemePackage.EXPRESSION__OPER:
        return basicSetOper(null, msgs);
      case SchemePackage.EXPRESSION__COND:
        return basicSetCond(null, msgs);
      case SchemePackage.EXPRESSION__SET:
        return basicSetSet(null, msgs);
      case SchemePackage.EXPRESSION__APP:
        return basicSetApp(null, msgs);
      case SchemePackage.EXPRESSION__MULT:
        return basicSetMult(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SchemePackage.EXPRESSION__CONSTANT:
        return getConstant();
      case SchemePackage.EXPRESSION__OPER:
        return getOper();
      case SchemePackage.EXPRESSION__COND:
        return getCond();
      case SchemePackage.EXPRESSION__SET:
        return getSet();
      case SchemePackage.EXPRESSION__APP:
        return getApp();
      case SchemePackage.EXPRESSION__MULT:
        return getMult();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SchemePackage.EXPRESSION__CONSTANT:
        setConstant((String)newValue);
        return;
      case SchemePackage.EXPRESSION__OPER:
        setOper((Operation)newValue);
        return;
      case SchemePackage.EXPRESSION__COND:
        setCond((Conditional)newValue);
        return;
      case SchemePackage.EXPRESSION__SET:
        setSet((Set)newValue);
        return;
      case SchemePackage.EXPRESSION__APP:
        setApp((Application)newValue);
        return;
      case SchemePackage.EXPRESSION__MULT:
        setMult((MultipleCondition)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SchemePackage.EXPRESSION__CONSTANT:
        setConstant(CONSTANT_EDEFAULT);
        return;
      case SchemePackage.EXPRESSION__OPER:
        setOper((Operation)null);
        return;
      case SchemePackage.EXPRESSION__COND:
        setCond((Conditional)null);
        return;
      case SchemePackage.EXPRESSION__SET:
        setSet((Set)null);
        return;
      case SchemePackage.EXPRESSION__APP:
        setApp((Application)null);
        return;
      case SchemePackage.EXPRESSION__MULT:
        setMult((MultipleCondition)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SchemePackage.EXPRESSION__CONSTANT:
        return CONSTANT_EDEFAULT == null ? constant != null : !CONSTANT_EDEFAULT.equals(constant);
      case SchemePackage.EXPRESSION__OPER:
        return oper != null;
      case SchemePackage.EXPRESSION__COND:
        return cond != null;
      case SchemePackage.EXPRESSION__SET:
        return set != null;
      case SchemePackage.EXPRESSION__APP:
        return app != null;
      case SchemePackage.EXPRESSION__MULT:
        return mult != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (constant: ");
    result.append(constant);
    result.append(')');
    return result.toString();
  }

} //ExpressionImpl
