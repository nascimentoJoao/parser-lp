/**
 * generated by Xtext 2.16.0
 */
package org.xtext.example.mydsl.scheme.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.scheme.Calculate;
import org.xtext.example.mydsl.scheme.Comparison;
import org.xtext.example.mydsl.scheme.Conditional;
import org.xtext.example.mydsl.scheme.Expression;
import org.xtext.example.mydsl.scheme.ListLength;
import org.xtext.example.mydsl.scheme.ListNumbers;
import org.xtext.example.mydsl.scheme.NestedOperation;
import org.xtext.example.mydsl.scheme.Operation;
import org.xtext.example.mydsl.scheme.SchemePackage;
import org.xtext.example.mydsl.scheme.Set;
import org.xtext.example.mydsl.scheme.Trigonometry;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.scheme.impl.ExpressionImpl#getConstant <em>Constant</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.scheme.impl.ExpressionImpl#getOper <em>Oper</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.scheme.impl.ExpressionImpl#getComp <em>Comp</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.scheme.impl.ExpressionImpl#getCond <em>Cond</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.scheme.impl.ExpressionImpl#getSet <em>Set</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.scheme.impl.ExpressionImpl#getTrig <em>Trig</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.scheme.impl.ExpressionImpl#getList <em>List</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.scheme.impl.ExpressionImpl#getListLength <em>List Length</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.scheme.impl.ExpressionImpl#getNestedOperation <em>Nested Operation</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.scheme.impl.ExpressionImpl#getCalculate <em>Calculate</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExpressionImpl extends MinimalEObjectImpl.Container implements Expression
{
  /**
   * The default value of the '{@link #getConstant() <em>Constant</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstant()
   * @generated
   * @ordered
   */
  protected static final String CONSTANT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getConstant() <em>Constant</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstant()
   * @generated
   * @ordered
   */
  protected String constant = CONSTANT_EDEFAULT;

  /**
   * The cached value of the '{@link #getOper() <em>Oper</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOper()
   * @generated
   * @ordered
   */
  protected Operation oper;

  /**
   * The cached value of the '{@link #getComp() <em>Comp</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComp()
   * @generated
   * @ordered
   */
  protected Comparison comp;

  /**
   * The cached value of the '{@link #getCond() <em>Cond</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCond()
   * @generated
   * @ordered
   */
  protected Conditional cond;

  /**
   * The cached value of the '{@link #getSet() <em>Set</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSet()
   * @generated
   * @ordered
   */
  protected Set set;

  /**
   * The cached value of the '{@link #getTrig() <em>Trig</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTrig()
   * @generated
   * @ordered
   */
  protected Trigonometry trig;

  /**
   * The cached value of the '{@link #getList() <em>List</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getList()
   * @generated
   * @ordered
   */
  protected ListNumbers list;

  /**
   * The cached value of the '{@link #getListLength() <em>List Length</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getListLength()
   * @generated
   * @ordered
   */
  protected ListLength listLength;

  /**
   * The cached value of the '{@link #getNestedOperation() <em>Nested Operation</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNestedOperation()
   * @generated
   * @ordered
   */
  protected NestedOperation nestedOperation;

  /**
   * The cached value of the '{@link #getCalculate() <em>Calculate</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCalculate()
   * @generated
   * @ordered
   */
  protected Calculate calculate;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SchemePackage.Literals.EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getConstant()
  {
    return constant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConstant(String newConstant)
  {
    String oldConstant = constant;
    constant = newConstant;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SchemePackage.EXPRESSION__CONSTANT, oldConstant, constant));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Operation getOper()
  {
    return oper;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOper(Operation newOper, NotificationChain msgs)
  {
    Operation oldOper = oper;
    oper = newOper;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SchemePackage.EXPRESSION__OPER, oldOper, newOper);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOper(Operation newOper)
  {
    if (newOper != oper)
    {
      NotificationChain msgs = null;
      if (oper != null)
        msgs = ((InternalEObject)oper).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SchemePackage.EXPRESSION__OPER, null, msgs);
      if (newOper != null)
        msgs = ((InternalEObject)newOper).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SchemePackage.EXPRESSION__OPER, null, msgs);
      msgs = basicSetOper(newOper, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SchemePackage.EXPRESSION__OPER, newOper, newOper));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Comparison getComp()
  {
    return comp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetComp(Comparison newComp, NotificationChain msgs)
  {
    Comparison oldComp = comp;
    comp = newComp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SchemePackage.EXPRESSION__COMP, oldComp, newComp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setComp(Comparison newComp)
  {
    if (newComp != comp)
    {
      NotificationChain msgs = null;
      if (comp != null)
        msgs = ((InternalEObject)comp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SchemePackage.EXPRESSION__COMP, null, msgs);
      if (newComp != null)
        msgs = ((InternalEObject)newComp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SchemePackage.EXPRESSION__COMP, null, msgs);
      msgs = basicSetComp(newComp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SchemePackage.EXPRESSION__COMP, newComp, newComp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Conditional getCond()
  {
    return cond;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCond(Conditional newCond, NotificationChain msgs)
  {
    Conditional oldCond = cond;
    cond = newCond;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SchemePackage.EXPRESSION__COND, oldCond, newCond);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCond(Conditional newCond)
  {
    if (newCond != cond)
    {
      NotificationChain msgs = null;
      if (cond != null)
        msgs = ((InternalEObject)cond).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SchemePackage.EXPRESSION__COND, null, msgs);
      if (newCond != null)
        msgs = ((InternalEObject)newCond).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SchemePackage.EXPRESSION__COND, null, msgs);
      msgs = basicSetCond(newCond, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SchemePackage.EXPRESSION__COND, newCond, newCond));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Set getSet()
  {
    return set;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSet(Set newSet, NotificationChain msgs)
  {
    Set oldSet = set;
    set = newSet;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SchemePackage.EXPRESSION__SET, oldSet, newSet);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSet(Set newSet)
  {
    if (newSet != set)
    {
      NotificationChain msgs = null;
      if (set != null)
        msgs = ((InternalEObject)set).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SchemePackage.EXPRESSION__SET, null, msgs);
      if (newSet != null)
        msgs = ((InternalEObject)newSet).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SchemePackage.EXPRESSION__SET, null, msgs);
      msgs = basicSetSet(newSet, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SchemePackage.EXPRESSION__SET, newSet, newSet));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Trigonometry getTrig()
  {
    return trig;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTrig(Trigonometry newTrig, NotificationChain msgs)
  {
    Trigonometry oldTrig = trig;
    trig = newTrig;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SchemePackage.EXPRESSION__TRIG, oldTrig, newTrig);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTrig(Trigonometry newTrig)
  {
    if (newTrig != trig)
    {
      NotificationChain msgs = null;
      if (trig != null)
        msgs = ((InternalEObject)trig).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SchemePackage.EXPRESSION__TRIG, null, msgs);
      if (newTrig != null)
        msgs = ((InternalEObject)newTrig).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SchemePackage.EXPRESSION__TRIG, null, msgs);
      msgs = basicSetTrig(newTrig, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SchemePackage.EXPRESSION__TRIG, newTrig, newTrig));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ListNumbers getList()
  {
    return list;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetList(ListNumbers newList, NotificationChain msgs)
  {
    ListNumbers oldList = list;
    list = newList;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SchemePackage.EXPRESSION__LIST, oldList, newList);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setList(ListNumbers newList)
  {
    if (newList != list)
    {
      NotificationChain msgs = null;
      if (list != null)
        msgs = ((InternalEObject)list).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SchemePackage.EXPRESSION__LIST, null, msgs);
      if (newList != null)
        msgs = ((InternalEObject)newList).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SchemePackage.EXPRESSION__LIST, null, msgs);
      msgs = basicSetList(newList, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SchemePackage.EXPRESSION__LIST, newList, newList));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ListLength getListLength()
  {
    return listLength;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetListLength(ListLength newListLength, NotificationChain msgs)
  {
    ListLength oldListLength = listLength;
    listLength = newListLength;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SchemePackage.EXPRESSION__LIST_LENGTH, oldListLength, newListLength);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setListLength(ListLength newListLength)
  {
    if (newListLength != listLength)
    {
      NotificationChain msgs = null;
      if (listLength != null)
        msgs = ((InternalEObject)listLength).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SchemePackage.EXPRESSION__LIST_LENGTH, null, msgs);
      if (newListLength != null)
        msgs = ((InternalEObject)newListLength).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SchemePackage.EXPRESSION__LIST_LENGTH, null, msgs);
      msgs = basicSetListLength(newListLength, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SchemePackage.EXPRESSION__LIST_LENGTH, newListLength, newListLength));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NestedOperation getNestedOperation()
  {
    return nestedOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetNestedOperation(NestedOperation newNestedOperation, NotificationChain msgs)
  {
    NestedOperation oldNestedOperation = nestedOperation;
    nestedOperation = newNestedOperation;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SchemePackage.EXPRESSION__NESTED_OPERATION, oldNestedOperation, newNestedOperation);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNestedOperation(NestedOperation newNestedOperation)
  {
    if (newNestedOperation != nestedOperation)
    {
      NotificationChain msgs = null;
      if (nestedOperation != null)
        msgs = ((InternalEObject)nestedOperation).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SchemePackage.EXPRESSION__NESTED_OPERATION, null, msgs);
      if (newNestedOperation != null)
        msgs = ((InternalEObject)newNestedOperation).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SchemePackage.EXPRESSION__NESTED_OPERATION, null, msgs);
      msgs = basicSetNestedOperation(newNestedOperation, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SchemePackage.EXPRESSION__NESTED_OPERATION, newNestedOperation, newNestedOperation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Calculate getCalculate()
  {
    return calculate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCalculate(Calculate newCalculate, NotificationChain msgs)
  {
    Calculate oldCalculate = calculate;
    calculate = newCalculate;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SchemePackage.EXPRESSION__CALCULATE, oldCalculate, newCalculate);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCalculate(Calculate newCalculate)
  {
    if (newCalculate != calculate)
    {
      NotificationChain msgs = null;
      if (calculate != null)
        msgs = ((InternalEObject)calculate).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SchemePackage.EXPRESSION__CALCULATE, null, msgs);
      if (newCalculate != null)
        msgs = ((InternalEObject)newCalculate).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SchemePackage.EXPRESSION__CALCULATE, null, msgs);
      msgs = basicSetCalculate(newCalculate, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SchemePackage.EXPRESSION__CALCULATE, newCalculate, newCalculate));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SchemePackage.EXPRESSION__OPER:
        return basicSetOper(null, msgs);
      case SchemePackage.EXPRESSION__COMP:
        return basicSetComp(null, msgs);
      case SchemePackage.EXPRESSION__COND:
        return basicSetCond(null, msgs);
      case SchemePackage.EXPRESSION__SET:
        return basicSetSet(null, msgs);
      case SchemePackage.EXPRESSION__TRIG:
        return basicSetTrig(null, msgs);
      case SchemePackage.EXPRESSION__LIST:
        return basicSetList(null, msgs);
      case SchemePackage.EXPRESSION__LIST_LENGTH:
        return basicSetListLength(null, msgs);
      case SchemePackage.EXPRESSION__NESTED_OPERATION:
        return basicSetNestedOperation(null, msgs);
      case SchemePackage.EXPRESSION__CALCULATE:
        return basicSetCalculate(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SchemePackage.EXPRESSION__CONSTANT:
        return getConstant();
      case SchemePackage.EXPRESSION__OPER:
        return getOper();
      case SchemePackage.EXPRESSION__COMP:
        return getComp();
      case SchemePackage.EXPRESSION__COND:
        return getCond();
      case SchemePackage.EXPRESSION__SET:
        return getSet();
      case SchemePackage.EXPRESSION__TRIG:
        return getTrig();
      case SchemePackage.EXPRESSION__LIST:
        return getList();
      case SchemePackage.EXPRESSION__LIST_LENGTH:
        return getListLength();
      case SchemePackage.EXPRESSION__NESTED_OPERATION:
        return getNestedOperation();
      case SchemePackage.EXPRESSION__CALCULATE:
        return getCalculate();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SchemePackage.EXPRESSION__CONSTANT:
        setConstant((String)newValue);
        return;
      case SchemePackage.EXPRESSION__OPER:
        setOper((Operation)newValue);
        return;
      case SchemePackage.EXPRESSION__COMP:
        setComp((Comparison)newValue);
        return;
      case SchemePackage.EXPRESSION__COND:
        setCond((Conditional)newValue);
        return;
      case SchemePackage.EXPRESSION__SET:
        setSet((Set)newValue);
        return;
      case SchemePackage.EXPRESSION__TRIG:
        setTrig((Trigonometry)newValue);
        return;
      case SchemePackage.EXPRESSION__LIST:
        setList((ListNumbers)newValue);
        return;
      case SchemePackage.EXPRESSION__LIST_LENGTH:
        setListLength((ListLength)newValue);
        return;
      case SchemePackage.EXPRESSION__NESTED_OPERATION:
        setNestedOperation((NestedOperation)newValue);
        return;
      case SchemePackage.EXPRESSION__CALCULATE:
        setCalculate((Calculate)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SchemePackage.EXPRESSION__CONSTANT:
        setConstant(CONSTANT_EDEFAULT);
        return;
      case SchemePackage.EXPRESSION__OPER:
        setOper((Operation)null);
        return;
      case SchemePackage.EXPRESSION__COMP:
        setComp((Comparison)null);
        return;
      case SchemePackage.EXPRESSION__COND:
        setCond((Conditional)null);
        return;
      case SchemePackage.EXPRESSION__SET:
        setSet((Set)null);
        return;
      case SchemePackage.EXPRESSION__TRIG:
        setTrig((Trigonometry)null);
        return;
      case SchemePackage.EXPRESSION__LIST:
        setList((ListNumbers)null);
        return;
      case SchemePackage.EXPRESSION__LIST_LENGTH:
        setListLength((ListLength)null);
        return;
      case SchemePackage.EXPRESSION__NESTED_OPERATION:
        setNestedOperation((NestedOperation)null);
        return;
      case SchemePackage.EXPRESSION__CALCULATE:
        setCalculate((Calculate)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SchemePackage.EXPRESSION__CONSTANT:
        return CONSTANT_EDEFAULT == null ? constant != null : !CONSTANT_EDEFAULT.equals(constant);
      case SchemePackage.EXPRESSION__OPER:
        return oper != null;
      case SchemePackage.EXPRESSION__COMP:
        return comp != null;
      case SchemePackage.EXPRESSION__COND:
        return cond != null;
      case SchemePackage.EXPRESSION__SET:
        return set != null;
      case SchemePackage.EXPRESSION__TRIG:
        return trig != null;
      case SchemePackage.EXPRESSION__LIST:
        return list != null;
      case SchemePackage.EXPRESSION__LIST_LENGTH:
        return listLength != null;
      case SchemePackage.EXPRESSION__NESTED_OPERATION:
        return nestedOperation != null;
      case SchemePackage.EXPRESSION__CALCULATE:
        return calculate != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (constant: ");
    result.append(constant);
    result.append(')');
    return result.toString();
  }

} //ExpressionImpl
